{
  "test_patterns": {
    "is_union_of_base_models_6968": {
      "function_name": "is_union_of_base_models",
      "function_signature": "def is_union_of_base_models(field_type: Any) -> bool:",
      "test_code": "Error: 401 Client Error: Unauthorized for url: https://huggingface.co/api/models/h2oai/h2ogpt-16k-codellama-13b-python?expand=inferenceProviderMapping (Request ID: Root=1-689b68c6-6d74a2af5c335928497dde5a;9be2464b-083b-4623-bdbc-6ac842206457)\n\nInvalid credentials in Authorization header",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:16:06.442529",
      "usage_count": 0
    },
    "post_union_form_4503": {
      "function_name": "post_union_form",
      "function_signature": "def post_union_form(data: Annotated[Union[UserForm, CompanyForm], Form()]):",
      "test_code": "Error: 401 Client Error: Unauthorized for url: https://huggingface.co/api/models/h2oai/h2ogpt-16k-codellama-13b-python?expand=inferenceProviderMapping (Request ID: Root=1-689b68c6-6067b51971688836553a8749;5b297c67-9c5c-4ec6-8903-4cd5a0c3e7ff)\n\nInvalid credentials in Authorization header",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:16:06.634964",
      "usage_count": 0
    },
    "test_post_user_form_7584": {
      "function_name": "test_post_user_form",
      "function_signature": "def test_post_user_form():",
      "test_code": "Error: 401 Client Error: Unauthorized for url: https://huggingface.co/api/models/h2oai/h2ogpt-16k-codellama-13b-python?expand=inferenceProviderMapping (Request ID: Root=1-689b68c7-341769a46a5ce3de502f23b8;be75d13e-5460-4109-8d7f-25da237f629b)\n\nInvalid credentials in Authorization header",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:16:06.815061",
      "usage_count": 0
    },
    "test_post_company_form_863": {
      "function_name": "test_post_company_form",
      "function_signature": "def test_post_company_form():",
      "test_code": "Error: 401 Client Error: Unauthorized for url: https://huggingface.co/api/models/h2oai/h2ogpt-16k-codellama-13b-python?expand=inferenceProviderMapping (Request ID: Root=1-689b68c7-2b8292395b63bcf66f0fed51;c4b8bd9c-66cb-4fb9-8f47-c944ce7faa61)\n\nInvalid credentials in Authorization header",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:16:06.996864",
      "usage_count": 0
    },
    "test_invalid_form_data_6602": {
      "function_name": "test_invalid_form_data",
      "function_signature": "def test_invalid_form_data():",
      "test_code": "Error: 401 Client Error: Unauthorized for url: https://huggingface.co/api/models/h2oai/h2ogpt-16k-codellama-13b-python?expand=inferenceProviderMapping (Request ID: Root=1-689b68c7-2af4daf11ab728de7bc8f58f;b7ea58c6-a369-4745-a79a-dfed5f495661)\n\nInvalid credentials in Authorization header",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:16:07.181129",
      "usage_count": 0
    },
    "test_empty_form_1131": {
      "function_name": "test_empty_form",
      "function_signature": "def test_empty_form():",
      "test_code": "Error: 401 Client Error: Unauthorized for url: https://huggingface.co/api/models/h2oai/h2ogpt-16k-codellama-13b-python?expand=inferenceProviderMapping (Request ID: Root=1-689b68c7-28adbd113baca27458c722d9;a96be915-fc39-47e1-9da3-b801af417849)\n\nInvalid credentials in Authorization header",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:16:07.365509",
      "usage_count": 0
    },
    "test_openapi_schema_6382": {
      "function_name": "test_openapi_schema",
      "function_signature": "def test_openapi_schema():",
      "test_code": "Error: 401 Client Error: Unauthorized for url: https://huggingface.co/api/models/h2oai/h2ogpt-16k-codellama-13b-python?expand=inferenceProviderMapping (Request ID: Root=1-689b68c7-0123bf017487eaaf77f1ef6e;71e3e47f-7a01-4561-9ab4-790093ad7bea)\n\nInvalid credentials in Authorization header",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:16:07.552504",
      "usage_count": 0
    },
    "is_union_of_base_models_1606": {
      "function_name": "is_union_of_base_models",
      "function_signature": "def is_union_of_base_models(field_type: Any) -> bool:",
      "test_code": "Error: 504 Server Error: Gateway Time-out for url: https://router.huggingface.co/featherless-ai/v1/completions",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:17:57.364541",
      "usage_count": 0
    },
    "post_union_form_2991": {
      "function_name": "post_union_form",
      "function_signature": "def post_union_form(data: Annotated[Union[UserForm, CompanyForm], Form()]):",
      "test_code": "Error: 504 Server Error: Gateway Time-out for url: https://router.huggingface.co/featherless-ai/v1/completions",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:20:58.100142",
      "usage_count": 0
    },
    "test_post_user_form_7562": {
      "function_name": "test_post_user_form",
      "function_signature": "def test_post_user_form():",
      "test_code": "Error: 504 Server Error: Gateway Time-out for url: https://router.huggingface.co/featherless-ai/v1/completions",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:21:58.718986",
      "usage_count": 0
    },
    "test_post_company_form_8796": {
      "function_name": "test_post_company_form",
      "function_signature": "def test_post_company_form():",
      "test_code": "Error: 504 Server Error: Gateway Time-out for url: https://router.huggingface.co/featherless-ai/v1/completions",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:22:59.921505",
      "usage_count": 0
    },
    "test_invalid_form_data_9009": {
      "function_name": "test_invalid_form_data",
      "function_signature": "def test_invalid_form_data():",
      "test_code": "Error: 504 Server Error: Gateway Time-out for url: https://router.huggingface.co/featherless-ai/v1/completions",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:24:00.478400",
      "usage_count": 0
    },
    "is_union_of_base_models_5536": {
      "function_name": "is_union_of_base_models",
      "function_signature": "def is_union_of_base_models(field_type: Any) -> bool:",
      "test_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:46:25.197892",
      "usage_count": 0
    },
    "post_union_form_7647": {
      "function_name": "post_union_form",
      "function_signature": "def post_union_form(data: Annotated[Union[UserForm, CompanyForm], Form()]):",
      "test_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n agreement_id, agreement_type_id, agreement_status_id, agreement_start_date, agreement_end_date, agreement_description, agreement_location_id, agreement_currency_id, agreement_cost_id, agreement_duration_id, agreement_cancellation_id, agreement_extension_id, agreement_payment_id, agreement_prepayment_id, agreement_postpayment_id, agreement_credit_id, agreement_invoice_id, agreement_outvoice_id, agreement_report_id, agreement_invoice_report_id, agreement_outvoice_report_id, agreement_start_date_id, agreement_end_date_id, agreement_duration_id_id, agreement_description_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id_id, agreement_location_id",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:35:13.929462",
      "usage_count": 0
    },
    "test_post_user_form_582": {
      "function_name": "test_post_user_form",
      "function_signature": "def test_post_user_form():",
      "test_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n G\u00f3\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad\u00ad",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:36:43.084347",
      "usage_count": 0
    },
    "test_post_company_form_4309": {
      "function_name": "test_post_company_form",
      "function_signature": "def test_post_company_form():",
      "test_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n tant queued for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for for",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:38:08.132082",
      "usage_count": 0
    },
    "test_invalid_form_data_6137": {
      "function_name": "test_invalid_form_data",
      "function_signature": "def test_invalid_form_data():",
      "test_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Gonz\u00e1lez\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n cheer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:39:35.233157",
      "usage_count": 0
    },
    "test_empty_form_8495": {
      "function_name": "test_empty_form",
      "function_signature": "def test_empty_form():",
      "test_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninae\ndef main():\n    # init\n    global _db\n    _db = {}\n\n    # init\n    global _db\n    _db = {}\n\n
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:41:52.755502",
      "usage_count": 0
    },
    "test_openapi_schema_2052": {
      "function_name": "test_openapi_schema",
      "function_signature": "def test_openapi_schema():",
      "test_code": "# Basic Test Template\nimport pytest\n\ndef test_function_basic():\n    \"\"\"Basic test template - please implement specific test cases\"\"\"\n    # TODO: Add proper test cases based on the function\n    pass\n\ndef test_function_edge_cases():\n    \"\"\"Test edge cases and error conditions\"\"\"\n    # TODO: Add edge case tests\n    pass",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:44:03.462157",
      "usage_count": 0
    },
    "is_union_of_base_models_8756": {
      "function_name": "is_union_of_base_models",
      "function_signature": "def is_union_of_base_models(field_type: Any) -> bool:",
      "test_code": "# Basic Test Template\nimport pytest\n\ndef test_function_basic():\n    \"\"\"Basic test template - please implement specific test cases\"\"\"\n    # TODO: Add proper test cases based on the function\n    pass\n\ndef test_function_edge_cases():\n    \"\"\"Test edge cases and error conditions\"\"\"\n    # TODO: Add edge case tests\n    pass",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:49:11.105587",
      "usage_count": 0
    },
    "post_union_form_7620": {
      "function_name": "post_union_form",
      "function_signature": "def post_union_form(data: Annotated[Union[UserForm, CompanyForm], Form()]):",
      "test_code": "# Basic Test Template\nimport pytest\n\ndef test_function_basic():\n    \"\"\"Basic test template - please implement specific test cases\"\"\"\n    # TODO: Add proper test cases based on the function\n    pass\n\ndef test_function_edge_cases():\n    \"\"\"Test edge cases and error conditions\"\"\"\n    # TODO: Add edge case tests\n    pass",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:49:19.496030",
      "usage_count": 0
    },
    "test_post_user_form_967": {
      "function_name": "test_post_user_form",
      "function_signature": "def test_post_user_form():",
      "test_code": "# Basic Test Template\nimport pytest\n\ndef test_function_basic():\n    \"\"\"Basic test template - please implement specific test cases\"\"\"\n    # TODO: Add proper test cases based on the function\n    pass\n\ndef test_function_edge_cases():\n    \"\"\"Test edge cases and error conditions\"\"\"\n    # TODO: Add edge case tests\n    pass",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:49:29.377277",
      "usage_count": 0
    },
    "test_post_company_form_3553": {
      "function_name": "test_post_company_form",
      "function_signature": "def test_post_company_form():",
      "test_code": "# Basic Test Template\nimport pytest\n\ndef test_function_basic():\n    \"\"\"Basic test template - please implement specific test cases\"\"\"\n    # TODO: Add proper test cases based on the function\n    pass\n\ndef test_function_edge_cases():\n    \"\"\"Test edge cases and error conditions\"\"\"\n    # TODO: Add edge case tests\n    pass",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T19:49:38.558251",
      "usage_count": 0
    },
    "is_union_of_base_models_2406": {
      "function_name": "is_union_of_base_models",
      "function_signature": "def is_union_of_base_models(field_type: Any) -> bool:",
      "test_code": "# Basic Test Template\nimport pytest\n\ndef test_function_basic():\n    pass\n\ndef test_function_edge_cases():\n    pass",
      "coverage_score": null,
      "mutation_score": null,
      "created_at": "2025-08-12T20:27:09.543464",
      "usage_count": 0
    }
  },
  "function_contexts": {
    "is_union_of_base_models": {
      "file_path": "fastapi/dependencies/utils.py",
      "diff_context": "diff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex 84dfa4d0306a6..081b63a8bdcef 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -816,6 +816,25 @@ def request_params_to_args(\n     return values, errors\n \n \n+def is_union_of_base_models(field_type: Any) -> bool:\n+    \"\"\"Check if field type is a Union where all members are BaseModel subclasses.\"\"\"\n+    from fastapi.types import UnionType\n+\n+    origin = get_origin(field_type)\n+\n+    # Check if it's a Union type (covers both typing.Union and types.UnionType in Python 3.10+)\n+    if origin is not Union and origin is not UnionType:\n+        return False\n+\n+    union_args = get_args(field_type)\n+\n+    for arg in union_args:\n+        if not lenient_issubclass(arg, BaseModel):\n+            return False\n+\n+    return True\n+\n+\n def _should_embed_body_fields(fields: List[ModelField]) -> bool:\n     if not fields:\n         return False\n@@ -829,10 +848,12 @@ def _should_embed_body_fields(",
      "module_context": "",
      "created_at": "2025-08-12T20:27:05.090105",
      "last_accessed": "2025-08-12T20:27:05.090105"
    },
    "post_union_form": {
      "file_path": "tests/test_union_forms.py",
      "diff_context": "diff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex 84dfa4d0306a6..081b63a8bdcef 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -816,6 +816,25 @@ def request_params_to_args(\n     return values, errors\n \n \n+def is_union_of_base_models(field_type: Any) -> bool:\n+    \"\"\"Check if field type is a Union where all members are BaseModel subclasses.\"\"\"\n+    from fastapi.types import UnionType\n+\n+    origin = get_origin(field_type)\n+\n+    # Check if it's a Union type (covers both typing.Union and types.UnionType in Python 3.10+)\n+    if origin is not Union and origin is not UnionType:\n+        return False\n+\n+    union_args = get_args(field_type)\n+\n+    for arg in union_args:\n+        if not lenient_issubclass(arg, BaseModel):\n+            return False\n+\n+    return True\n+\n+\n def _should_embed_body_fields(fields: List[ModelField]) -> bool:\n     if not fields:\n         return False\n@@ -829,10 +848,12 @@ def _should_embed_body_fields(",
      "module_context": "",
      "created_at": "2025-08-12T20:27:14.615519",
      "last_accessed": "2025-08-12T20:27:14.615519"
    },
    "test_post_user_form": {
      "file_path": "tests/test_union_forms.py",
      "diff_context": "diff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex 84dfa4d0306a6..081b63a8bdcef 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -816,6 +816,25 @@ def request_params_to_args(\n     return values, errors\n \n \n+def is_union_of_base_models(field_type: Any) -> bool:\n+    \"\"\"Check if field type is a Union where all members are BaseModel subclasses.\"\"\"\n+    from fastapi.types import UnionType\n+\n+    origin = get_origin(field_type)\n+\n+    # Check if it's a Union type (covers both typing.Union and types.UnionType in Python 3.10+)\n+    if origin is not Union and origin is not UnionType:\n+        return False\n+\n+    union_args = get_args(field_type)\n+\n+    for arg in union_args:\n+        if not lenient_issubclass(arg, BaseModel):\n+            return False\n+\n+    return True\n+\n+\n def _should_embed_body_fields(fields: List[ModelField]) -> bool:\n     if not fields:\n         return False\n@@ -829,10 +848,12 @@ def _should_embed_body_fields(",
      "module_context": "",
      "created_at": "2025-08-12T19:49:24.563389",
      "last_accessed": "2025-08-12T19:49:24.563389"
    },
    "test_post_company_form": {
      "file_path": "tests/test_union_forms.py",
      "diff_context": "diff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex 84dfa4d0306a6..081b63a8bdcef 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -816,6 +816,25 @@ def request_params_to_args(\n     return values, errors\n \n \n+def is_union_of_base_models(field_type: Any) -> bool:\n+    \"\"\"Check if field type is a Union where all members are BaseModel subclasses.\"\"\"\n+    from fastapi.types import UnionType\n+\n+    origin = get_origin(field_type)\n+\n+    # Check if it's a Union type (covers both typing.Union and types.UnionType in Python 3.10+)\n+    if origin is not Union and origin is not UnionType:\n+        return False\n+\n+    union_args = get_args(field_type)\n+\n+    for arg in union_args:\n+        if not lenient_issubclass(arg, BaseModel):\n+            return False\n+\n+    return True\n+\n+\n def _should_embed_body_fields(fields: List[ModelField]) -> bool:\n     if not fields:\n         return False\n@@ -829,10 +848,12 @@ def _should_embed_body_fields(",
      "module_context": "",
      "created_at": "2025-08-12T19:49:34.087290",
      "last_accessed": "2025-08-12T19:49:34.087290"
    },
    "test_invalid_form_data": {
      "file_path": "tests/test_union_forms.py",
      "diff_context": "diff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex 84dfa4d0306a6..081b63a8bdcef 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -816,6 +816,25 @@ def request_params_to_args(\n     return values, errors\n \n \n+def is_union_of_base_models(field_type: Any) -> bool:\n+    \"\"\"Check if field type is a Union where all members are BaseModel subclasses.\"\"\"\n+    from fastapi.types import UnionType\n+\n+    origin = get_origin(field_type)\n+\n+    # Check if it's a Union type (covers both typing.Union and types.UnionType in Python 3.10+)\n+    if origin is not Union and origin is not UnionType:\n+        return False\n+\n+    union_args = get_args(field_type)\n+\n+    for arg in union_args:\n+        if not lenient_issubclass(arg, BaseModel):\n+            return False\n+\n+    return True\n+\n+\n def _should_embed_body_fields(fields: List[ModelField]) -> bool:\n     if not fields:\n         return False\n@@ -829,10 +848,12 @@ def _should_embed_body_fields(",
      "module_context": "",
      "created_at": "2025-08-12T19:38:36.825384",
      "last_accessed": "2025-08-12T19:38:36.825384"
    },
    "test_empty_form": {
      "file_path": "tests/test_union_forms.py",
      "diff_context": "diff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex 84dfa4d0306a6..081b63a8bdcef 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -816,6 +816,25 @@ def request_params_to_args(\n     return values, errors\n \n \n+def is_union_of_base_models(field_type: Any) -> bool:\n+    \"\"\"Check if field type is a Union where all members are BaseModel subclasses.\"\"\"\n+    from fastapi.types import UnionType\n+\n+    origin = get_origin(field_type)\n+\n+    # Check if it's a Union type (covers both typing.Union and types.UnionType in Python 3.10+)\n+    if origin is not Union and origin is not UnionType:\n+        return False\n+\n+    union_args = get_args(field_type)\n+\n+    for arg in union_args:\n+        if not lenient_issubclass(arg, BaseModel):\n+            return False\n+\n+    return True\n+\n+\n def _should_embed_body_fields(fields: List[ModelField]) -> bool:\n     if not fields:\n         return False\n@@ -829,10 +848,12 @@ def _should_embed_body_fields(",
      "module_context": "",
      "created_at": "2025-08-12T19:40:56.877160",
      "last_accessed": "2025-08-12T19:40:56.877160"
    },
    "test_openapi_schema": {
      "file_path": "tests/test_union_forms.py",
      "diff_context": "diff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex 84dfa4d0306a6..081b63a8bdcef 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -816,6 +816,25 @@ def request_params_to_args(\n     return values, errors\n \n \n+def is_union_of_base_models(field_type: Any) -> bool:\n+    \"\"\"Check if field type is a Union where all members are BaseModel subclasses.\"\"\"\n+    from fastapi.types import UnionType\n+\n+    origin = get_origin(field_type)\n+\n+    # Check if it's a Union type (covers both typing.Union and types.UnionType in Python 3.10+)\n+    if origin is not Union and origin is not UnionType:\n+        return False\n+\n+    union_args = get_args(field_type)\n+\n+    for arg in union_args:\n+        if not lenient_issubclass(arg, BaseModel):\n+            return False\n+\n+    return True\n+\n+\n def _should_embed_body_fields(fields: List[ModelField]) -> bool:\n     if not fields:\n         return False\n@@ -829,10 +848,12 @@ def _should_embed_body_fields(",
      "module_context": "",
      "created_at": "2025-08-12T19:42:50.182428",
      "last_accessed": "2025-08-12T19:42:50.182428"
    }
  },
  "diff_patterns": {},
  "coverage_gaps": {},
  "prompt_effectiveness": {},
  "last_updated": "2025-08-12T20:27:14.615519"
}