{
  "test/integration/consul-container/libs/service/common.go": {
    "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: BUSL-1.1\n\npackage service\n\nimport (\n\t_ \"embed\"\n)\n\nconst (\n\tenvoyLogLevel        = \"debug\"\n\tHashicorpDockerProxy = \"docker.mirror.hashicorp.services\"\n)\n",
    "language": "go"
  },
  "test/integration/consul-container/libs/service/examples.go": {
    "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: BUSL-1.1\n\npackage service\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"github.com/testcontainers/testcontainers-go\"\n\t\"github.com/testcontainers/testcontainers-go/wait\"\n\n\t\"github.com/hashicorp/consul/api\"\n\n\tlibcluster \"github.com/hashicorp/consul/test/integration/consul-container/libs/cluster\"\n\t\"github.com/hashicorp/consul/test/integration/consul-container/libs/utils\"\n)\n\n// exampleContainer\ntype exampleContainer struct {\n\tctx         context.Context\n\tcontainer   testcontainers.Container\n\tip          string\n\thttpPort    int\n\tgrpcPort    int\n\tserviceName string\n}\n\nvar _ Service = (*exampleContainer)(nil)\n\nfunc (g exampleContainer) Exec(ctx context.Context, cmd []string) (string, error) {\n\texitCode, reader, err := g.container.Exec(ctx, cmd)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"exec with error %s\", err)\n\t}\n\tif exitCode != 0 {\n\t\treturn \"\", fmt.Errorf(\"exec with exit code %d\", exitCode)\n\t}\n\tbuf, err := io.ReadAll(reader)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"error reading from exec output: %w\", err)\n\t}\n\treturn string(buf), nil\n}\n\nfunc (g exampleContainer) Export(partition, peerName string, client *api.Client) error {\n\tconfig := &api.ExportedServicesConfigEntry{\n\t\tName: partition,\n\t\tServices: []api.ExportedService{{\n\t\t\tName: g.GetServiceName(),\n\t\t\tConsumers: []api.ServiceConsumer{\n\t\t\t\t// TODO: need to handle the changed field name in 1.13\n\t\t\t\t{Peer: peerName},\n\t\t\t},\n\t\t}},\n\t}\n\n\t_, _, err := client.ConfigEntries().Set(config, &api.WriteOptions{})\n\treturn err\n}\n\nfunc (g exampleContainer) GetAddr() (string, int) {\n\treturn g.ip, g.httpPort\n}\n\nfunc (g exampleContainer) GetAddrs() (string, []int) {\n\treturn \"\", nil\n}\n\nfunc (g exampleContainer) GetPort(port int) (int, error) {\n\treturn 0, nil\n}\n\nfunc (g exampleContainer) Restart() error {\n\treturn fmt.Errorf(\"Restart Unimplemented by ConnectContainer\")\n}\n\nfunc (g exampleContainer) GetLogs() (string, error) {\n\trc, err := g.container.Logs(g.ctx)\n\tif err != ",
    "language": "go"
  },
  "test/integration/consul-container/test/gateways/gateway_endpoint_test.go": {
    "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: BUSL-1.1\n\npackage gateways\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/hashicorp/go-cleanhttp\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/hashicorp/consul/api\"\n\tlibassert \"github.com/hashicorp/consul/test/integration/consul-container/libs/assert\"\n\tlibcluster \"github.com/hashicorp/consul/test/integration/consul-container/libs/cluster\"\n\tlibservice \"github.com/hashicorp/consul/test/integration/consul-container/libs/service\"\n\tlibtopology \"github.com/hashicorp/consul/test/integration/consul-container/libs/topology\"\n)\n\n// Creates a gateway service and tests to see if it is routable\nfunc TestAPIGatewayCreate(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"too slow for testing.Short\")\n\t}\n\n\tt.Parallel()\n\n\tgatewayName := randomName(\"gateway\", 16)\n\trouteName := randomName(\"route\", 16)\n\tserviceName := randomName(\"service\", 16)\n\tlistenerPortOne := 6000\n\tserviceHTTPPort := 6001\n\tserviceGRPCPort := 6002\n\n\tclusterConfig := &libtopology.ClusterConfig{\n\t\tNumServers: 1,\n\t\tNumClients: 1,\n\t\tBuildOpts: &libcluster.BuildOptions{\n\t\t\tDatacenter:             \"dc1\",\n\t\t\tInjectAutoEncryption:   true,\n\t\t\tInjectGossipEncryption: true,\n\t\t\tAllowHTTPAnyway:        true,\n\t\t},\n\t\tExposedPorts: []int{\n\t\t\tlistenerPortOne,\n\t\t\tserviceHTTPPort,\n\t\t\tserviceGRPCPort,\n\t\t},\n\t}\n\n\tcluster, _, _ := libtopology.NewCluster(t, clusterConfig)\n\tclient := cluster.APIClient(0)\n\n\tnamespace := getOrCreateNamespace(t, client)\n\n\t// Create a gateway\n\t// We intentionally do this before creating the config entries\n\tgatewayService, err := libservice.NewGatewayService(context.Background(), libservice.GatewayConfig{\n\t\tKind:      \"api\",\n\t\tNamespace: namespace,\n\t\tName:      gatewayName,\n\t}, cluster.Agents[0], listenerPortOne)\n\trequire.NoError(t, err)\n\n\t// We check this is healthy here because in the case of bringing up a new kube cluster,\n\t// it is not possible to create the config entry in advance.\n\t// The health chec",
    "language": "go"
  },
  "test/integration/consul-container/test/gateways/http_route_test.go": {
    "content": "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: BUSL-1.1\n\npackage gateways\n\nimport (\n\t\"context\"\n\t\"crypto/rand\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"github.com/testcontainers/testcontainers-go\"\n\t\"k8s.io/utils/pointer\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/hashicorp/consul/api\"\n\n\tlibassert \"github.com/hashicorp/consul/test/integration/consul-container/libs/assert\"\n\tlibcluster \"github.com/hashicorp/consul/test/integration/consul-container/libs/cluster\"\n\tlibservice \"github.com/hashicorp/consul/test/integration/consul-container/libs/service\"\n\tlibtopology \"github.com/hashicorp/consul/test/integration/consul-container/libs/topology\"\n)\n\n// randomName generates a random name of n length with the provided\n// prefix. If prefix is omitted, the then entire name is random char.\nfunc randomName(prefix string, n int) string {\n\tif n == 0 {\n\t\tn = 32\n\t}\n\tif len(prefix) >= n {\n\t\treturn prefix\n\t}\n\tp := make([]byte, n)\n\trand.Read(p)\n\treturn fmt.Sprintf(\"%s-%s\", prefix, hex.EncodeToString(p))[:n]\n}\n\nfunc TestHTTPRouteFlattening(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"too slow for testing.Short\")\n\t}\n\tt.Parallel()\n\n\t// infrastructure set up\n\tlistenerPort := 6004\n\tserviceOneHTTPPort := 6005\n\tserviceOneGRPCPort := 6006\n\tserviceTwoHTTPPort := 6007\n\tserviceTwoGRPCPort := 6008\n\n\tserviceOneName := randomName(\"service\", 16)\n\tserviceTwoName := randomName(\"service\", 16)\n\tserviceOneResponseCode := 200\n\tserviceTwoResponseCode := 418\n\tgatewayName := randomName(\"gw\", 16)\n\trouteOneName := randomName(\"route\", 16)\n\trouteTwoName := randomName(\"route\", 16)\n\tfooHostName := \"test.foo\"\n\texampleHostName := \"test.example\"\n\tpath1 := \"/\"\n\tpath2 := \"/v2\"\n\n\tclusterConfig := &libtopology.ClusterConfig{\n\t\tNumServers: 1,\n\t\tNumClients: 1,\n\t\tBuildOpts: &libcluster.BuildOptions{\n\t\t\tDatacenter:             \"dc1\",\n\t\t\tInjectAutoEncryption:   true,\n\t\t\tInjectGossipEncryption: true,\n\t\t\tAllowHTTPAnyway:        true,\n\t\t},\n\t\tExposedPorts: []int{\n\t\t\tli",
    "language": "go"
  }
}