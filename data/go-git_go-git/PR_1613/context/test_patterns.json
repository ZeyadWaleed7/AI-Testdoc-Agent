{
  "repository_test.go": {
    "content": "package git\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\t\"os/user\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\tfixtures \"github.com/go-git/go-git-fixtures/v5\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/suite\"\n\n\t\"github.com/ProtonMail/go-crypto/openpgp\"\n\t\"github.com/ProtonMail/go-crypto/openpgp/armor\"\n\topenpgperr \"github.com/ProtonMail/go-crypto/openpgp/errors\"\n\n\t\"github.com/go-git/go-git/v6/config\"\n\t\"github.com/go-git/go-git/v6/plumbing\"\n\t\"github.com/go-git/go-git/v6/plumbing/cache\"\n\t\"github.com/go-git/go-git/v6/plumbing/object\"\n\t\"github.com/go-git/go-git/v6/plumbing/protocol/packp\"\n\t\"github.com/go-git/go-git/v6/plumbing/storer\"\n\t\"github.com/go-git/go-git/v6/plumbing/transport\"\n\t\"github.com/go-git/go-git/v6/storage\"\n\t\"github.com/go-git/go-git/v6/storage/filesystem\"\n\t\"github.com/go-git/go-git/v6/storage/memory\"\n\n\t\"github.com/go-git/go-billy/v6\"\n\t\"github.com/go-git/go-billy/v6/memfs\"\n\t\"github.com/go-git/go-billy/v6/osfs\"\n\t\"github.com/go-git/go-billy/v6/util\"\n)\n\ntype RepositorySuite struct {\n\tBaseSuite\n}\n\nfunc TestRepositorySuite(t *testing.T) {\n\tsuite.Run(t, new(RepositorySuite))\n}\n\nfunc (s *RepositorySuite) TestInit() {\n\tr, err := Init(memory.NewStorage(), WithWorkTree(memfs.New()))\n\ts.NoError(err)\n\ts.NotNil(r)\n\n\tcfg, err := r.Config()\n\ts.NoError(err)\n\ts.False(cfg.Core.IsBare)\n\n\t// check the HEAD to see what the default branch is\n\tcreateCommit(s, r)\n\tref, err := r.Head()\n\ts.NoError(err)\n\ts.Equal(plumbing.Master.String(), ref.Name().String())\n}\n\nfunc (s *RepositorySuite) TestInitWithOptions() {\n\tr, err := Init(memory.NewStorage(), WithWorkTree(memfs.New()),\n\t\tWithDefaultBranch(\"refs/heads/foo\"),\n\t)\n\ts.NoError(err)\n\ts.NotNil(r)\n\tcreateCommit(s, r)\n\n\tref, err := r.Head()\n\ts.NoError(err)\n\ts.Equal(\"refs/heads/foo\", ref.Name().String())\n}\n\nfunc (s *RepositorySuite) TestInitWithInvalidDefaultBranch() {\n\t_, err := Init(memory.NewStorage(), WithWorkTree(memfs.New()),\n\t\tWithDefaultBranch(\"foo\"),\n\t)\n\ts.No",
    "language": "go"
  }
}