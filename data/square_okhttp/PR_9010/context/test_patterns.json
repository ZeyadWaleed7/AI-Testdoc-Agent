{
  "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceFactoryTest.java": {
    "content": "/*\n * Copyright (C) 2018 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage okhttp3.sse.internal;\n\nimport mockwebserver3.MockResponse;\nimport mockwebserver3.MockWebServer;\nimport mockwebserver3.junit5.StartStop;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport okhttp3.sse.EventSource;\nimport okhttp3.sse.EventSourceListener;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.concurrent.CompletableFuture;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class EventSourceFactoryTest {\n\n  @StartStop\n  private final MockWebServer server = new MockWebServer();\n\n  @Test\n  public void testEventSourceFactory() throws Exception {\n    OkHttpClient client = new OkHttpClient();\n    EventSource.Factory factory = EventSource.Factory.create(client);\n    server.enqueue(\n      new MockResponse.Builder()\n        .body(\"data: hello\\n\\n\")\n        .setHeader(\"content-type\", \"text/event-stream\")\n        .build()\n    );\n    Request request = new Request.Builder().url(server.url(\"/\")).build();\n    CompletableFuture<Void> future = new CompletableFuture<>();\n    factory.newEventSource(request, new EventSourceListener() {\n      @Override\n      public void onOpen(@NotNull EventSource eventSource, @NotNull Response response) {\n        try {\n          assertEquals(\"text/event-stream\", response.request().header(\"Accept\"));\n        } ",
    "language": "java"
  },
  "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.kt": {
    "content": "/*\n * Copyright (C) 2018 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage okhttp3.sse.internal\n\nimport assertk.assertThat\nimport assertk.assertions.containsExactly\nimport assertk.assertions.isEqualTo\nimport java.util.concurrent.TimeUnit\nimport mockwebserver3.MockResponse\nimport mockwebserver3.MockWebServer\nimport mockwebserver3.junit5.StartStop\nimport okhttp3.OkHttpClientTestRule\nimport okhttp3.RecordingEventListener\nimport okhttp3.Request\nimport okhttp3.sse.EventSource\nimport okhttp3.sse.EventSource.Factory.Companion.asEventSourceFactory\nimport okhttp3.testing.PlatformRule\nimport org.junit.jupiter.api.AfterEach\nimport org.junit.jupiter.api.Tag\nimport org.junit.jupiter.api.Test\nimport org.junit.jupiter.api.extension.RegisterExtension\nimport org.junitpioneer.jupiter.RetryingTest\n\n@Tag(\"Slowish\")\nclass EventSourceHttpTest {\n  @RegisterExtension\n  val platform = PlatformRule()\n\n  @StartStop\n  private val server = MockWebServer()\n\n  @RegisterExtension\n  val clientTestRule = OkHttpClientTestRule()\n  private val eventListener = RecordingEventListener()\n  private val listener = EventSourceRecorder()\n  private var client =\n    clientTestRule\n      .newClientBuilder()\n      .eventListenerFactory(clientTestRule.wrap(eventListener))\n      .build()\n\n  @AfterEach\n  fun after() {\n    listener.assertExhausted()\n  }\n\n  @Test\n  fun event() {\n    server.enqueue(\n      MockResponse\n        .Builder()\n        .body(\n          \"\"\"\n          |data: hey\n          ",
    "language": "kotlin"
  },
  "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourcesHttpTest.kt": {
    "content": "/*\n * Copyright (C) 2018 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage okhttp3.sse.internal\n\nimport mockwebserver3.MockResponse\nimport mockwebserver3.MockWebServer\nimport mockwebserver3.junit5.StartStop\nimport okhttp3.OkHttpClientTestRule\nimport okhttp3.Request\nimport okhttp3.sse.EventSource.Companion.processEventSource\nimport okhttp3.testing.PlatformRule\nimport org.junit.jupiter.api.AfterEach\nimport org.junit.jupiter.api.Tag\nimport org.junit.jupiter.api.Test\nimport org.junit.jupiter.api.extension.RegisterExtension\n\n@Tag(\"Slowish\")\nclass EventSourcesHttpTest {\n  @RegisterExtension\n  val platform = PlatformRule()\n\n  @StartStop\n  private val server = MockWebServer()\n\n  @RegisterExtension\n  val clientTestRule = OkHttpClientTestRule()\n\n  private val listener = EventSourceRecorder()\n  private val client = clientTestRule.newClient()\n\n  @AfterEach\n  fun after() {\n    listener.assertExhausted()\n  }\n\n  @Test\n  fun processResponse() {\n    server.enqueue(\n      MockResponse\n        .Builder()\n        .body(\n          \"\"\"\n          |data: hey\n          |\n          |\n          \"\"\".trimMargin(),\n        ).setHeader(\"content-type\", \"text/event-stream\")\n        .build(),\n    )\n    val request =\n      Request\n        .Builder()\n        .url(server.url(\"/\"))\n        .build()\n    val response = client.newCall(request).execute()\n    response.processEventSource(listener)\n    listener.assertOpen()\n    listener.assertEvent(null, null, \"hey\")\n    listener.assert",
    "language": "kotlin"
  }
}