{
  "okhttp-sse/api/okhttp-sse.api": {
    "status": "modified",
    "patch": "@@ -1,12 +1,26 @@\n public abstract interface class okhttp3/sse/EventSource {\n+\tpublic static final field Companion Lokhttp3/sse/EventSource$Companion;\n \tpublic abstract fun cancel ()V\n+\tpublic static fun enqueue (Lokhttp3/Call;Lokhttp3/sse/EventSourceListener;)Lokhttp3/sse/EventSource;\n+\tpublic static fun process (Lokhttp3/Response;Lokhttp3/sse/EventSourceListener;)V\n \tpublic abstract fun request ()Lokhttp3/Request;\n }\n \n+public final class okhttp3/sse/EventSource$Companion {\n+\tpublic final fun enqueue (Lokhttp3/Call;Lokhttp3/sse/EventSourceListener;)Lokhttp3/sse/EventSource;\n+\tpublic final fun process (Lokhttp3/Response;Lokhttp3/sse/EventSourceListener;)V\n+}\n+\n public abstract interface class okhttp3/sse/EventSource$Factory {\n+\tpublic static final field Companion Lokhttp3/sse/EventSource$Factory$Companion;\n+\tpublic static fun create (Lokhttp3/Call$Factory;)Lokhttp3/sse/EventSource$Factory;\n \tpublic abstract fun newEventSource (Lokhttp3/Request;Lokhttp3/sse/EventSourceListener;)Lokhttp3/sse/EventSource;\n }\n \n+public final class okhttp3/sse/EventSource$Factory$Companion {\n+\tpublic final fun create (Lokhttp3/Call$Factory;)Lokhttp3/sse/EventSource$Factory;\n+}\n+\n public abstract class okhttp3/sse/EventSourceListener {\n \tpublic fun <init> ()V\n \tpublic fun onClosed (Lokhttp3/sse/EventSource;)V",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "language": "unknown",
    "imports": [],
    "full_content": "public abstract interface class okhttp3/sse/EventSource {\n\tpublic static final field Companion Lokhttp3/sse/EventSource$Companion;\n\tpublic abstract fun cancel ()V\n\tpublic static fun enqueue (Lokhttp3/Call;Lokhttp3/sse/EventSourceListener;)Lokhttp3/sse/EventSource;\n\tpublic static fun process (Lokhttp3/Response;Lokhttp3/sse/EventSourceListener;)V\n\tpublic abstract fun request ()Lokhttp3/Request;\n}\n\npublic final class okhttp3/sse/EventSource$Companion {\n\tpublic final fun enqueue (Lokhttp3/Call;Lokhttp3/sse/EventSourceListener;)Lokhttp3/sse/EventSource;\n\tpublic final fun process (Lokhttp3/Response;Lokhttp3/sse/EventSourceListener;)V\n}\n\npublic abstract interface class okhttp3/sse/EventSource$Factory {\n\tpublic static final field Companion Lokhttp3/sse/EventSource$Factory$Companion;\n\tpublic static fun create (Lokhttp3/Call$Factory;)Lokhttp3/sse/EventSource$Factory;\n\tpublic abstract fun newEventSource (Lokhttp3/Request;Lokhttp3/sse/EventSourceListener;)Lokhttp3/sse/EventSource;\n}\n\npublic final class okhttp3/sse/EventSource$Factory$Companion {\n\tpublic final fun create (Lokhttp3/Call$Factory;)Lokhttp3/sse/EventSource$Factory;\n}\n\npublic abstract class okhttp3/sse/EventSourceListener {\n\tpublic fun <init> ()V\n\tpublic fun onClosed (Lokhttp3/sse/EventSource;)V\n\tpublic fun onEvent (Lokhttp3/sse/EventSource;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\n\tpublic fun onFailure (Lokhttp3/sse/EventSource;Ljava/lang/Throwable;Lokhttp3/Response;)V\n\tpublic fun onOpen (Lokhttp3/sse/EventSource;Lokhttp3/Response;)V\n}\n\npublic final class okhttp3/sse/EventSources {\n\tpublic static final field INSTANCE Lokhttp3/sse/EventSources;\n\tpublic static final fun createFactory (Lokhttp3/Call$Factory;)Lokhttp3/sse/EventSource$Factory;\n\tpublic static final synthetic fun createFactory (Lokhttp3/OkHttpClient;)Lokhttp3/sse/EventSource$Factory;\n\tpublic static final fun processResponse (Lokhttp3/Response;Lokhttp3/sse/EventSourceListener;)V\n}\n\n",
    "raw_url": "https://github.com/square/okhttp/raw/1bcd168e0776ab8f442de53220384e1166f63c80/okhttp-sse%2Fapi%2Fokhttp-sse.api",
    "is_test_file": false
  },
  "okhttp-sse/src/main/kotlin/okhttp3/sse/EventSource.kt": {
    "status": "modified",
    "patch": "@@ -15,7 +15,10 @@\n  */\n package okhttp3.sse\n \n+import okhttp3.Call\n import okhttp3.Request\n+import okhttp3.Response\n+import okhttp3.sse.internal.RealEventSource\n \n interface EventSource {\n   /** Returns the original request that initiated this event source. */\n@@ -37,5 +40,40 @@ interface EventSource {\n       request: Request,\n       listener: EventSourceListener,\n     ): EventSource\n+\n+    companion object {\n+      /**\n+       * Wraps a [Call.Factory] into [EventSource.Factory].\n+       */\n+      @JvmStatic\n+      @JvmName(\"create\")\n+      fun Call.Factory.asEventSourceFactory(): Factory =\n+        Factory { request, listener ->\n+          val actualRequest =\n+            if (request.header(\"Accept\") == null) {\n+              request.newBuilder().addHeader(\"Accept\", \"text/event-stream\").build()\n+            } else {\n+              request\n+            }\n+\n+          this.newCall(actualRequest).enqueueEventSource(listener)\n+        }\n+    }\n+  }\n+\n+  companion object {\n+    /**\n+     * Enqueues a [Call] and process it as [EventSource] with [listener].\n+     */\n+    @JvmStatic\n+    @JvmName(\"enqueue\")\n+    fun Call.enqueueEventSource(listener: EventSourceListener): EventSource = RealEventSource(this, listener).also(this::enqueue)\n+\n+    /**\n+     * Processes the existing response with [listener].\n+     */\n+    @JvmStatic\n+    @JvmName(\"process\")\n+    fun Response.processEventSource(listener: EventSourceListener) = RealEventSource(this, listener).processResponse(this)\n   }\n }",
    "additions": 38,
    "deletions": 0,
    "changes": 38,
    "language": "kotlin",
    "imports": [],
    "full_content": "/*\n * Copyright (C) 2018 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage okhttp3.sse\n\nimport okhttp3.Call\nimport okhttp3.Request\nimport okhttp3.Response\nimport okhttp3.sse.internal.RealEventSource\n\ninterface EventSource {\n  /** Returns the original request that initiated this event source. */\n  fun request(): Request\n\n  /**\n   * Immediately and violently release resources held by this event source. This does nothing if\n   * the event source has already been closed or canceled.\n   */\n  fun cancel()\n\n  fun interface Factory {\n    /**\n     * Creates a new event source and immediately returns it. Creating an event source initiates an\n     * asynchronous process to connect the socket. Once that succeeds or fails, `listener` will be\n     * notified. The caller must cancel the returned event source when it is no longer in use.\n     */\n    fun newEventSource(\n      request: Request,\n      listener: EventSourceListener,\n    ): EventSource\n\n    companion object {\n      /**\n       * Wraps a [Call.Factory] into [EventSource.Factory].\n       */\n      @JvmStatic\n      @JvmName(\"create\")\n      fun Call.Factory.asEventSourceFactory(): Factory =\n        Factory { request, listener ->\n          val actualRequest =\n            if (request.header(\"Accept\") == null) {\n              request.newBuilder().addHeader(\"Accept\", \"text/event-stream\").build()\n            } else {\n              request\n            }\n\n          this.newCall(actualRequest).enqueueEventSour",
    "raw_url": "https://github.com/square/okhttp/raw/1bcd168e0776ab8f442de53220384e1166f63c80/okhttp-sse%2Fsrc%2Fmain%2Fkotlin%2Fokhttp3%2Fsse%2FEventSource.kt",
    "is_test_file": false
  },
  "okhttp-sse/src/main/kotlin/okhttp3/sse/EventSourceListener.kt": {
    "status": "modified",
    "patch": "@@ -29,7 +29,11 @@ abstract class EventSourceListener {\n   }\n \n   /**\n-   * TODO description.\n+   * Invoked when a new event has been sent to the client.\n+   *\n+   * @param id The `id` line of the event, might be null.\n+   * @param type The `event` line of the event, might be null.\n+   * @param data The `data` line of the event.\n    */\n   open fun onEvent(\n     eventSource: EventSource,\n@@ -40,7 +44,7 @@ abstract class EventSourceListener {\n   }\n \n   /**\n-   * TODO description.\n+   * Invoked when the HTTP connection has been closed normally.\n    *\n    * No further calls to this listener will be made.\n    */",
    "additions": 6,
    "deletions": 2,
    "changes": 8,
    "language": "kotlin",
    "imports": [],
    "full_content": "/*\n * Copyright (C) 2018 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage okhttp3.sse\n\nimport okhttp3.Response\n\nabstract class EventSourceListener {\n  /**\n   * Invoked when an event source has been accepted by the remote peer and may begin transmitting\n   * events.\n   */\n  open fun onOpen(\n    eventSource: EventSource,\n    response: Response,\n  ) {\n  }\n\n  /**\n   * Invoked when a new event has been sent to the client.\n   *\n   * @param id The `id` line of the event, might be null.\n   * @param type The `event` line of the event, might be null.\n   * @param data The `data` line of the event.\n   */\n  open fun onEvent(\n    eventSource: EventSource,\n    id: String?,\n    type: String?,\n    data: String,\n  ) {\n  }\n\n  /**\n   * Invoked when the HTTP connection has been closed normally.\n   *\n   * No further calls to this listener will be made.\n   */\n  open fun onClosed(eventSource: EventSource) {\n  }\n\n  /**\n   * Invoked when an event source has been closed due to an error reading from or writing to the\n   * network. Incoming events may have been lost. No further calls to this listener will be made.\n   */\n  open fun onFailure(\n    eventSource: EventSource,\n    t: Throwable?,\n    response: Response?,\n  ) {\n  }\n}\n",
    "raw_url": "https://github.com/square/okhttp/raw/1bcd168e0776ab8f442de53220384e1166f63c80/okhttp-sse%2Fsrc%2Fmain%2Fkotlin%2Fokhttp3%2Fsse%2FEventSourceListener.kt",
    "is_test_file": false
  },
  "okhttp-sse/src/main/kotlin/okhttp3/sse/EventSources.kt": {
    "status": "modified",
    "patch": "@@ -18,37 +18,41 @@ package okhttp3.sse\n import okhttp3.Call\n import okhttp3.OkHttpClient\n import okhttp3.Response\n-import okhttp3.sse.internal.RealEventSource\n+import okhttp3.sse.EventSource.Companion.processEventSource\n+import okhttp3.sse.EventSource.Factory.Companion.asEventSourceFactory\n \n object EventSources {\n   @Deprecated(\n     message = \"required for binary-compatibility!\",\n     level = DeprecationLevel.HIDDEN,\n   )\n   @JvmStatic\n-  fun createFactory(client: OkHttpClient) = createFactory(client as Call.Factory)\n+  fun createFactory(client: OkHttpClient) = client.asEventSourceFactory()\n \n+  @Deprecated(\n+    message = \"Moved to extension function.\",\n+    replaceWith =\n+      ReplaceWith(\n+        expression = \"callFactory.asEventSourceFactory()\",\n+        imports = [\"okhttp3.sse.EventSource.Factory.Companion.asEventSourceFactory\"],\n+      ),\n+    level = DeprecationLevel.WARNING,\n+  )\n   @JvmStatic\n-  fun createFactory(callFactory: Call.Factory): EventSource.Factory =\n-    EventSource.Factory { request, listener ->\n-      val actualRequest =\n-        if (request.header(\"Accept\") == null) {\n-          request.newBuilder().addHeader(\"Accept\", \"text/event-stream\").build()\n-        } else {\n-          request\n-        }\n-\n-      RealEventSource(actualRequest, listener).apply {\n-        connect(callFactory)\n-      }\n-    }\n+  fun createFactory(callFactory: Call.Factory): EventSource.Factory = callFactory.asEventSourceFactory()\n \n+  @Deprecated(\n+    message = \"Moved to extension function.\",\n+    replaceWith =\n+      ReplaceWith(\n+        expression = \"response.processEventSource(listener)\",\n+        imports = [\"okhttp3.sse.EventSource.Companion.processEventSource\"],\n+      ),\n+    level = DeprecationLevel.WARNING,\n+  )\n   @JvmStatic\n   fun processResponse(\n     response: Response,\n     listener: EventSourceListener,\n-  ) {\n-    val eventSource = RealEventSource(response.request, listener)\n-    eventSource.processResponse(response)\n-  }\n+  ): Unit = response.processEventSource(listener)\n }",
    "additions": 23,
    "deletions": 19,
    "changes": 42,
    "language": "kotlin",
    "imports": [],
    "full_content": "/*\n * Copyright (C) 2018 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage okhttp3.sse\n\nimport okhttp3.Call\nimport okhttp3.OkHttpClient\nimport okhttp3.Response\nimport okhttp3.sse.EventSource.Companion.processEventSource\nimport okhttp3.sse.EventSource.Factory.Companion.asEventSourceFactory\n\nobject EventSources {\n  @Deprecated(\n    message = \"required for binary-compatibility!\",\n    level = DeprecationLevel.HIDDEN,\n  )\n  @JvmStatic\n  fun createFactory(client: OkHttpClient) = client.asEventSourceFactory()\n\n  @Deprecated(\n    message = \"Moved to extension function.\",\n    replaceWith =\n      ReplaceWith(\n        expression = \"callFactory.asEventSourceFactory()\",\n        imports = [\"okhttp3.sse.EventSource.Factory.Companion.asEventSourceFactory\"],\n      ),\n    level = DeprecationLevel.WARNING,\n  )\n  @JvmStatic\n  fun createFactory(callFactory: Call.Factory): EventSource.Factory = callFactory.asEventSourceFactory()\n\n  @Deprecated(\n    message = \"Moved to extension function.\",\n    replaceWith =\n      ReplaceWith(\n        expression = \"response.processEventSource(listener)\",\n        imports = [\"okhttp3.sse.EventSource.Companion.processEventSource\"],\n      ),\n    level = DeprecationLevel.WARNING,\n  )\n  @JvmStatic\n  fun processResponse(\n    response: Response,\n    listener: EventSourceListener,\n  ): Unit = response.processEventSource(listener)\n}\n",
    "raw_url": "https://github.com/square/okhttp/raw/1bcd168e0776ab8f442de53220384e1166f63c80/okhttp-sse%2Fsrc%2Fmain%2Fkotlin%2Fokhttp3%2Fsse%2FEventSources.kt",
    "is_test_file": false
  },
  "okhttp-sse/src/main/kotlin/okhttp3/sse/internal/RealEventSource.kt": {
    "status": "modified",
    "patch": "@@ -25,22 +25,18 @@ import okhttp3.internal.stripBody\n import okhttp3.sse.EventSource\n import okhttp3.sse.EventSourceListener\n \n-internal class RealEventSource(\n+internal class RealEventSource private constructor(\n+  private val call: Call?,\n   private val request: Request,\n   private val listener: EventSourceListener,\n ) : EventSource,\n   ServerSentEventReader.Callback,\n   Callback {\n-  private var call: Call? = null\n+  constructor(call: Call, listener: EventSourceListener) : this(call, call.request(), listener)\n \n-  @Volatile private var canceled = false\n+  constructor(response: Response, listener: EventSourceListener) : this(null, response.request, listener)\n \n-  fun connect(callFactory: Call.Factory) {\n-    call =\n-      callFactory.newCall(request).apply {\n-        enqueue(this@RealEventSource)\n-      }\n-  }\n+  @Volatile private var canceled = false\n \n   override fun onResponse(\n     call: Call,\n@@ -49,7 +45,7 @@ internal class RealEventSource(\n     processResponse(response)\n   }\n \n-  fun processResponse(response: Response) {\n+  internal fun processResponse(response: Response) {\n     response.use {\n       if (!response.isSuccessful) {\n         listener.onFailure(this, null, response)",
    "additions": 6,
    "deletions": 10,
    "changes": 16,
    "language": "kotlin",
    "imports": [],
    "full_content": "/*\n * Copyright (C) 2018 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage okhttp3.sse.internal\n\nimport java.io.IOException\nimport okhttp3.Call\nimport okhttp3.Callback\nimport okhttp3.Request\nimport okhttp3.Response\nimport okhttp3.ResponseBody\nimport okhttp3.internal.stripBody\nimport okhttp3.sse.EventSource\nimport okhttp3.sse.EventSourceListener\n\ninternal class RealEventSource private constructor(\n  private val call: Call?,\n  private val request: Request,\n  private val listener: EventSourceListener,\n) : EventSource,\n  ServerSentEventReader.Callback,\n  Callback {\n  constructor(call: Call, listener: EventSourceListener) : this(call, call.request(), listener)\n\n  constructor(response: Response, listener: EventSourceListener) : this(null, response.request, listener)\n\n  @Volatile private var canceled = false\n\n  override fun onResponse(\n    call: Call,\n    response: Response,\n  ) {\n    processResponse(response)\n  }\n\n  internal fun processResponse(response: Response) {\n    response.use {\n      if (!response.isSuccessful) {\n        listener.onFailure(this, null, response)\n        return\n      }\n\n      val body = response.body\n\n      if (!body.isEventStream()) {\n        listener.onFailure(\n          this,\n          IllegalStateException(\"Invalid content-type: ${body.contentType()}\"),\n          response,\n        )\n        return\n      }\n\n      // This is a long-lived response. Cancel full-call timeouts.\n      call?.timeout()?.cancel()\n\n      // Replace t",
    "raw_url": "https://github.com/square/okhttp/raw/1bcd168e0776ab8f442de53220384e1166f63c80/okhttp-sse%2Fsrc%2Fmain%2Fkotlin%2Fokhttp3%2Fsse%2Finternal%2FRealEventSource.kt",
    "is_test_file": false
  },
  "okhttp-sse/src/main/kotlin/okhttp3/sse/internal/ServerSentEventReader.kt": {
    "status": "modified",
    "patch": "@@ -22,7 +22,7 @@ import okio.BufferedSource\n import okio.ByteString.Companion.encodeUtf8\n import okio.Options\n \n-class ServerSentEventReader(\n+internal class ServerSentEventReader(\n   private val source: BufferedSource,\n   private val callback: Callback,\n ) {\n@@ -119,7 +119,7 @@ class ServerSentEventReader(\n   }\n \n   companion object {\n-    val options =\n+    private val options =\n       Options.of(\n         // 0\n         \"\\r\\n\".encodeUtf8(),",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "language": "kotlin",
    "imports": [],
    "full_content": "/*\n * Copyright (C) 2018 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage okhttp3.sse.internal\n\nimport java.io.IOException\nimport okhttp3.internal.toLongOrDefault\nimport okio.Buffer\nimport okio.BufferedSource\nimport okio.ByteString.Companion.encodeUtf8\nimport okio.Options\n\ninternal class ServerSentEventReader(\n  private val source: BufferedSource,\n  private val callback: Callback,\n) {\n  private var lastId: String? = null\n\n  interface Callback {\n    fun onEvent(\n      id: String?,\n      type: String?,\n      data: String,\n    )\n\n    fun onRetryChange(timeMs: Long)\n  }\n\n  /**\n   * Process the next event. This will result in a single call to [Callback.onEvent] *unless* the\n   * data section was empty. Any number of calls to [Callback.onRetryChange] may occur while\n   * processing an event.\n   *\n   * @return false when EOF is reached\n   */\n  @Throws(IOException::class)\n  fun processNextEvent(): Boolean {\n    var id = lastId\n    var type: String? = null\n    val data = Buffer()\n\n    while (true) {\n      when (source.select(options)) {\n        in 0..2 -> {\n          completeEvent(id, type, data)\n          return true\n        }\n\n        in 3..4 -> {\n          source.readData(data)\n        }\n\n        in 5..7 -> {\n          data.writeByte('\\n'.code) // 'data' on a line of its own.\n        }\n\n        in 8..9 -> {\n          id = source.readUtf8LineStrict().takeIf { it.isNotEmpty() }\n        }\n\n        in 10..12 -> {\n          id = null // 'id' on a line ",
    "raw_url": "https://github.com/square/okhttp/raw/1bcd168e0776ab8f442de53220384e1166f63c80/okhttp-sse%2Fsrc%2Fmain%2Fkotlin%2Fokhttp3%2Fsse%2Finternal%2FServerSentEventReader.kt",
    "is_test_file": false
  },
  "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceFactoryTest.java": {
    "status": "added",
    "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright (C) 2018 Square, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package okhttp3.sse.internal;\n+\n+import mockwebserver3.MockResponse;\n+import mockwebserver3.MockWebServer;\n+import mockwebserver3.junit5.StartStop;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import okhttp3.sse.EventSource;\n+import okhttp3.sse.EventSourceListener;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class EventSourceFactoryTest {\n+\n+  @StartStop\n+  private final MockWebServer server = new MockWebServer();\n+\n+  @Test\n+  public void testEventSourceFactory() throws Exception {\n+    OkHttpClient client = new OkHttpClient();\n+    EventSource.Factory factory = EventSource.Factory.create(client);\n+    server.enqueue(\n+      new MockResponse.Builder()\n+        .body(\"data: hello\\n\\n\")\n+        .setHeader(\"content-type\", \"text/event-stream\")\n+        .build()\n+    );\n+    Request request = new Request.Builder().url(server.url(\"/\")).build();\n+    CompletableFuture<Void> future = new CompletableFuture<>();\n+    factory.newEventSource(request, new EventSourceListener() {\n+      @Override\n+      public void onOpen(@NotNull EventSource eventSource, @NotNull Response response) {\n+        try {\n+          assertEquals(\"text/event-stream\", response.request().header(\"Accept\"));\n+        } catch (Exception e) {\n+          future.completeExceptionally(e);\n+        }\n+      }\n+\n+      @Override\n+      public void onEvent(@NotNull EventSource eventSource, @Nullable String id, @Nullable String type, @NotNull String data) {\n+        try {\n+          assertEquals(\"hello\", data);\n+          future.complete(null);\n+        } catch (Exception e) {\n+          future.completeExceptionally(e);\n+        }\n+      }\n+\n+      @Override\n+      public void onClosed(@NotNull EventSource eventSource) {\n+        future.completeExceptionally(new IllegalStateException(\"closed\"));\n+      }\n+\n+      @Override\n+      public void onFailure(@NotNull EventSource eventSource, @Nullable Throwable t, @Nullable Response response) {\n+        future.completeExceptionally(t == null ? new NullPointerException() : t);\n+      }\n+    });\n+    future.get();\n+  }\n+\n+}",
    "additions": 84,
    "deletions": 0,
    "changes": 84,
    "language": "java",
    "imports": [
      "import mockwebserver3.MockResponse;",
      "import mockwebserver3.MockWebServer;",
      "import mockwebserver3.junit5.StartStop;",
      "import okhttp3.OkHttpClient;",
      "import okhttp3.Request;",
      "import okhttp3.Response;",
      "import okhttp3.sse.EventSource;",
      "import okhttp3.sse.EventSourceListener;",
      "import org.jetbrains.annotations.NotNull;",
      "import org.jetbrains.annotations.Nullable;"
    ],
    "full_content": "/*\n * Copyright (C) 2018 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage okhttp3.sse.internal;\n\nimport mockwebserver3.MockResponse;\nimport mockwebserver3.MockWebServer;\nimport mockwebserver3.junit5.StartStop;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport okhttp3.sse.EventSource;\nimport okhttp3.sse.EventSourceListener;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.concurrent.CompletableFuture;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class EventSourceFactoryTest {\n\n  @StartStop\n  private final MockWebServer server = new MockWebServer();\n\n  @Test\n  public void testEventSourceFactory() throws Exception {\n    OkHttpClient client = new OkHttpClient();\n    EventSource.Factory factory = EventSource.Factory.create(client);\n    server.enqueue(\n      new MockResponse.Builder()\n        .body(\"data: hello\\n\\n\")\n        .setHeader(\"content-type\", \"text/event-stream\")\n        .build()\n    );\n    Request request = new Request.Builder().url(server.url(\"/\")).build();\n    CompletableFuture<Void> future = new CompletableFuture<>();\n    factory.newEventSource(request, new EventSourceListener() {\n      @Override\n      public void onOpen(@NotNull EventSource eventSource, @NotNull Response response) {\n        try {\n          assertEquals(\"text/event-stream\", response.request().header(\"Accept\"));\n        } ",
    "raw_url": "https://github.com/square/okhttp/raw/1bcd168e0776ab8f442de53220384e1166f63c80/okhttp-sse%2Fsrc%2Ftest%2Fjava%2Fokhttp3%2Fsse%2Finternal%2FEventSourceFactoryTest.java",
    "is_test_file": true
  },
  "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.kt": {
    "status": "modified",
    "patch": "@@ -26,7 +26,7 @@ import okhttp3.OkHttpClientTestRule\n import okhttp3.RecordingEventListener\n import okhttp3.Request\n import okhttp3.sse.EventSource\n-import okhttp3.sse.EventSources.createFactory\n+import okhttp3.sse.EventSource.Factory.Companion.asEventSourceFactory\n import okhttp3.testing.PlatformRule\n import org.junit.jupiter.api.AfterEach\n import org.junit.jupiter.api.Tag\n@@ -268,7 +268,7 @@ class EventSourceHttpTest {\n       builder.header(\"Accept\", accept)\n     }\n     val request = builder.build()\n-    val factory = createFactory(client)\n+    val factory = client.asEventSourceFactory()\n     return factory.newEventSource(request, listener)\n   }\n }",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "language": "kotlin",
    "imports": [],
    "full_content": "/*\n * Copyright (C) 2018 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage okhttp3.sse.internal\n\nimport assertk.assertThat\nimport assertk.assertions.containsExactly\nimport assertk.assertions.isEqualTo\nimport java.util.concurrent.TimeUnit\nimport mockwebserver3.MockResponse\nimport mockwebserver3.MockWebServer\nimport mockwebserver3.junit5.StartStop\nimport okhttp3.OkHttpClientTestRule\nimport okhttp3.RecordingEventListener\nimport okhttp3.Request\nimport okhttp3.sse.EventSource\nimport okhttp3.sse.EventSource.Factory.Companion.asEventSourceFactory\nimport okhttp3.testing.PlatformRule\nimport org.junit.jupiter.api.AfterEach\nimport org.junit.jupiter.api.Tag\nimport org.junit.jupiter.api.Test\nimport org.junit.jupiter.api.extension.RegisterExtension\nimport org.junitpioneer.jupiter.RetryingTest\n\n@Tag(\"Slowish\")\nclass EventSourceHttpTest {\n  @RegisterExtension\n  val platform = PlatformRule()\n\n  @StartStop\n  private val server = MockWebServer()\n\n  @RegisterExtension\n  val clientTestRule = OkHttpClientTestRule()\n  private val eventListener = RecordingEventListener()\n  private val listener = EventSourceRecorder()\n  private var client =\n    clientTestRule\n      .newClientBuilder()\n      .eventListenerFactory(clientTestRule.wrap(eventListener))\n      .build()\n\n  @AfterEach\n  fun after() {\n    listener.assertExhausted()\n  }\n\n  @Test\n  fun event() {\n    server.enqueue(\n      MockResponse\n        .Builder()\n        .body(\n          \"\"\"\n          |data: hey\n          ",
    "raw_url": "https://github.com/square/okhttp/raw/1bcd168e0776ab8f442de53220384e1166f63c80/okhttp-sse%2Fsrc%2Ftest%2Fjava%2Fokhttp3%2Fsse%2Finternal%2FEventSourceHttpTest.kt",
    "is_test_file": true
  },
  "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourcesHttpTest.kt": {
    "status": "modified",
    "patch": "@@ -20,7 +20,7 @@ import mockwebserver3.MockWebServer\n import mockwebserver3.junit5.StartStop\n import okhttp3.OkHttpClientTestRule\n import okhttp3.Request\n-import okhttp3.sse.EventSources.processResponse\n+import okhttp3.sse.EventSource.Companion.processEventSource\n import okhttp3.testing.PlatformRule\n import org.junit.jupiter.api.AfterEach\n import org.junit.jupiter.api.Tag\n@@ -66,7 +66,7 @@ class EventSourcesHttpTest {\n         .url(server.url(\"/\"))\n         .build()\n     val response = client.newCall(request).execute()\n-    processResponse(response, listener)\n+    response.processEventSource(listener)\n     listener.assertOpen()\n     listener.assertEvent(null, null, \"hey\")\n     listener.assertClose()\n@@ -93,7 +93,7 @@ class EventSourcesHttpTest {\n         .url(server.url(\"/\"))\n         .build()\n     val response = client.newCall(request).execute()\n-    processResponse(response, listener)\n+    response.processEventSource(listener)\n     listener.assertOpen()\n     listener.assertFailure(\"canceled\")\n   }",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "language": "kotlin",
    "imports": [],
    "full_content": "/*\n * Copyright (C) 2018 Square, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage okhttp3.sse.internal\n\nimport mockwebserver3.MockResponse\nimport mockwebserver3.MockWebServer\nimport mockwebserver3.junit5.StartStop\nimport okhttp3.OkHttpClientTestRule\nimport okhttp3.Request\nimport okhttp3.sse.EventSource.Companion.processEventSource\nimport okhttp3.testing.PlatformRule\nimport org.junit.jupiter.api.AfterEach\nimport org.junit.jupiter.api.Tag\nimport org.junit.jupiter.api.Test\nimport org.junit.jupiter.api.extension.RegisterExtension\n\n@Tag(\"Slowish\")\nclass EventSourcesHttpTest {\n  @RegisterExtension\n  val platform = PlatformRule()\n\n  @StartStop\n  private val server = MockWebServer()\n\n  @RegisterExtension\n  val clientTestRule = OkHttpClientTestRule()\n\n  private val listener = EventSourceRecorder()\n  private val client = clientTestRule.newClient()\n\n  @AfterEach\n  fun after() {\n    listener.assertExhausted()\n  }\n\n  @Test\n  fun processResponse() {\n    server.enqueue(\n      MockResponse\n        .Builder()\n        .body(\n          \"\"\"\n          |data: hey\n          |\n          |\n          \"\"\".trimMargin(),\n        ).setHeader(\"content-type\", \"text/event-stream\")\n        .build(),\n    )\n    val request =\n      Request\n        .Builder()\n        .url(server.url(\"/\"))\n        .build()\n    val response = client.newCall(request).execute()\n    response.processEventSource(listener)\n    listener.assertOpen()\n    listener.assertEvent(null, null, \"hey\")\n    listener.assert",
    "raw_url": "https://github.com/square/okhttp/raw/1bcd168e0776ab8f442de53220384e1166f63c80/okhttp-sse%2Fsrc%2Ftest%2Fjava%2Fokhttp3%2Fsse%2Finternal%2FEventSourcesHttpTest.kt",
    "is_test_file": true
  }
}