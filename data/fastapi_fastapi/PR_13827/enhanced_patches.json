{
  "fastapi/dependencies/utils.py": {
    "status": "modified",
    "patch": "@@ -816,6 +816,25 @@ def request_params_to_args(\n     return values, errors\n \n \n+def is_union_of_base_models(field_type: Any) -> bool:\n+    \"\"\"Check if field type is a Union where all members are BaseModel subclasses.\"\"\"\n+    from fastapi.types import UnionType\n+\n+    origin = get_origin(field_type)\n+\n+    # Check if it's a Union type (covers both typing.Union and types.UnionType in Python 3.10+)\n+    if origin is not Union and origin is not UnionType:\n+        return False\n+\n+    union_args = get_args(field_type)\n+\n+    for arg in union_args:\n+        if not lenient_issubclass(arg, BaseModel):\n+            return False\n+\n+    return True\n+\n+\n def _should_embed_body_fields(fields: List[ModelField]) -> bool:\n     if not fields:\n         return False\n@@ -829,10 +848,12 @@ def _should_embed_body_fields(fields: List[ModelField]) -> bool:\n     # If it explicitly specifies it is embedded, it has to be embedded\n     if getattr(first_field.field_info, \"embed\", None):\n         return True\n-    # If it's a Form (or File) field, it has to be a BaseModel to be top level\n+    # If it's a Form (or File) field, it has to be a BaseModel (or a union of BaseModels) to be top level\n     # otherwise it has to be embedded, so that the key value pair can be extracted\n-    if isinstance(first_field.field_info, params.Form) and not lenient_issubclass(\n-        first_field.type_, BaseModel\n+    if (\n+        isinstance(first_field.field_info, params.Form)\n+        and not lenient_issubclass(first_field.type_, BaseModel)\n+        and not is_union_of_base_models(first_field.type_)\n     ):\n         return True\n     return False",
    "additions": 24,
    "deletions": 3,
    "changes": 27,
    "language": "py",
    "imports": [
      "import inspect",
      "from contextlib import AsyncExitStack, contextmanager",
      "from copy import copy, deepcopy",
      "from dataclasses import dataclass",
      "from typing import (",
      "import anyio",
      "from fastapi import params",
      "from fastapi._compat import (",
      "from fastapi.background import BackgroundTasks",
      "from fastapi.concurrency import ("
    ],
    "full_content": "import inspect\nfrom contextlib import AsyncExitStack, contextmanager\nfrom copy import copy, deepcopy\nfrom dataclasses import dataclass\nfrom typing import (\n    Any,\n    Callable,\n    Coroutine,\n    Dict,\n    ForwardRef,\n    List,\n    Mapping,\n    Optional,\n    Sequence,\n    Tuple,\n    Type,\n    Union,\n    cast,\n)\n\nimport anyio\nfrom fastapi import params\nfrom fastapi._compat import (\n    PYDANTIC_V2,\n    ErrorWrapper,\n    ModelField,\n    RequiredParam,\n    Undefined,\n    _regenerate_error_with_loc,\n    copy_field_info,\n    create_body_model,\n    evaluate_forwardref,\n    field_annotation_is_scalar,\n    get_annotation_from_field_info,\n    get_cached_model_fields,\n    get_missing_field_error,\n    is_bytes_field,\n    is_bytes_sequence_field,\n    is_scalar_field,\n    is_scalar_sequence_field,\n    is_sequence_field,\n    is_uploadfile_or_nonable_uploadfile_annotation,\n    is_uploadfile_sequence_annotation,\n    lenient_issubclass,\n    sequence_types,\n    serialize_sequence_value,\n    value_is_sequence,\n)\nfrom fastapi.background import BackgroundTasks\nfrom fastapi.concurrency import (\n    asynccontextmanager,\n    contextmanager_in_threadpool,\n)\nfrom fastapi.dependencies.models import Dependant, SecurityRequirement\nfrom fastapi.logger import logger\nfrom fastapi.security.base import SecurityBase\nfrom fastapi.security.oauth2 import OAuth2, SecurityScopes\nfrom fastapi.security.open_id_connect_url import OpenIdConnect\nfrom fastapi.utils import create_model_field, get_path_param_names\nfrom pydantic import BaseModel\nfrom pydantic.fields import FieldInfo\nfrom starlette.background import BackgroundTasks as StarletteBackgroundTasks\nfrom starlette.concurrency import run_in_threadpool\nfrom starlette.datastructures import (\n    FormData,\n    Headers,\n    ImmutableMultiDict,\n    QueryParams,\n    UploadFile,\n)\nfrom starlette.requests import HTTPConnection, Request\nfrom starlette.responses import Response\nfrom starlette.websockets import WebSocket\nfrom typing_extensions import Annotated, get",
    "raw_url": "https://github.com/fastapi/fastapi/raw/0a39b835572e3ba69cc7a2fb9e1ee14f6e2acea9/fastapi%2Fdependencies%2Futils.py",
    "is_test_file": false
  },
  "tests/test_union_forms.py": {
    "status": "added",
    "patch": "@@ -0,0 +1,156 @@\n+from typing import Union\n+\n+from fastapi import FastAPI, Form\n+from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n+from typing_extensions import Annotated\n+\n+app = FastAPI()\n+\n+\n+class UserForm(BaseModel):\n+    name: str\n+    email: str\n+\n+\n+class CompanyForm(BaseModel):\n+    company_name: str\n+    industry: str\n+\n+\n+@app.post(\"/form-union/\")\n+def post_union_form(data: Annotated[Union[UserForm, CompanyForm], Form()]):\n+    return {\"received\": data}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_post_user_form():\n+    response = client.post(\n+        \"/form-union/\", data={\"name\": \"John Doe\", \"email\": \"john@example.com\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"received\": {\"name\": \"John Doe\", \"email\": \"john@example.com\"}\n+    }\n+\n+\n+def test_post_company_form():\n+    response = client.post(\n+        \"/form-union/\", data={\"company_name\": \"Tech Corp\", \"industry\": \"Technology\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"received\": {\"company_name\": \"Tech Corp\", \"industry\": \"Technology\"}\n+    }\n+\n+\n+def test_invalid_form_data():\n+    response = client.post(\n+        \"/form-union/\",\n+        data={\"name\": \"John\", \"company_name\": \"Tech Corp\"},\n+    )\n+    assert response.status_code == 422, response.text\n+\n+\n+def test_empty_form():\n+    response = client.post(\"/form-union/\")\n+    assert response.status_code == 422, response.text\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+\n+    assert response.json() == {\n+        \"openapi\": \"3.1.0\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/form-union/\": {\n+                \"post\": {\n+                    \"summary\": \"Post Union Form\",\n+                    \"operationId\": \"post_union_form_form_union__post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/x-www-form-urlencoded\": {\n+                                \"schema\": {\n+                                    \"anyOf\": [\n+                                        {\"$ref\": \"#/components/schemas/UserForm\"},\n+                                        {\"$ref\": \"#/components/schemas/CompanyForm\"},\n+                                    ],\n+                                    \"title\": \"Data\",\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            }\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"CompanyForm\": {\n+                    \"properties\": {\n+                        \"company_name\": {\"type\": \"string\", \"title\": \"Company Name\"},\n+                        \"industry\": {\"type\": \"string\", \"title\": \"Industry\"},\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"company_name\", \"industry\"],\n+                    \"title\": \"CompanyForm\",\n+                },\n+                \"HTTPValidationError\": {\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                            \"type\": \"array\",\n+                            \"title\": \"Detail\",\n+                        }\n+                    },\n+                    \"type\": \"object\",\n+                    \"title\": \"HTTPValidationError\",\n+                },\n+                \"UserForm\": {\n+                    \"properties\": {\n+                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                        \"email\": {\"type\": \"string\", \"title\": \"Email\"},\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"name\", \"email\"],\n+                    \"title\": \"UserForm\",\n+                },\n+                \"ValidationError\": {\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                            \"type\": \"array\",\n+                            \"title\": \"Location\",\n+                        },\n+                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n+                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n+                    },\n+                    \"type\": \"object\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"title\": \"ValidationError\",\n+                },\n+            }\n+        },\n+    }",
    "additions": 156,
    "deletions": 0,
    "changes": 156,
    "language": "py",
    "imports": [
      "from typing import Union",
      "from fastapi import FastAPI, Form",
      "from fastapi.testclient import TestClient",
      "from pydantic import BaseModel",
      "from typing_extensions import Annotated"
    ],
    "full_content": "from typing import Union\n\nfrom fastapi import FastAPI, Form\nfrom fastapi.testclient import TestClient\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\n\nclass UserForm(BaseModel):\n    name: str\n    email: str\n\n\nclass CompanyForm(BaseModel):\n    company_name: str\n    industry: str\n\n\n@app.post(\"/form-union/\")\ndef post_union_form(data: Annotated[Union[UserForm, CompanyForm], Form()]):\n    return {\"received\": data}\n\n\nclient = TestClient(app)\n\n\ndef test_post_user_form():\n    response = client.post(\n        \"/form-union/\", data={\"name\": \"John Doe\", \"email\": \"john@example.com\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"received\": {\"name\": \"John Doe\", \"email\": \"john@example.com\"}\n    }\n\n\ndef test_post_company_form():\n    response = client.post(\n        \"/form-union/\", data={\"company_name\": \"Tech Corp\", \"industry\": \"Technology\"}\n    )\n    assert response.status_code == 200, response.text\n    assert response.json() == {\n        \"received\": {\"company_name\": \"Tech Corp\", \"industry\": \"Technology\"}\n    }\n\n\ndef test_invalid_form_data():\n    response = client.post(\n        \"/form-union/\",\n        data={\"name\": \"John\", \"company_name\": \"Tech Corp\"},\n    )\n    assert response.status_code == 422, response.text\n\n\ndef test_empty_form():\n    response = client.post(\"/form-union/\")\n    assert response.status_code == 422, response.text\n\n\ndef test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200, response.text\n\n    assert response.json() == {\n        \"openapi\": \"3.1.0\",\n        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n        \"paths\": {\n            \"/form-union/\": {\n                \"post\": {\n                    \"summary\": \"Post Union Form\",\n                    \"operationId\": \"post_union_form_form_union__post\",\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-url",
    "raw_url": "https://github.com/fastapi/fastapi/raw/0a39b835572e3ba69cc7a2fb9e1ee14f6e2acea9/tests%2Ftest_union_forms.py",
    "is_test_file": true
  }
}