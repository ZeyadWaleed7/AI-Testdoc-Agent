{
  "src/llama-sampling.cpp": "@@ -798,7 +798,7 @@ static void llama_sampler_min_p_apply(struct llama_sampler * smpl, llama_token_d\n         }\n \n         // if we have enough values the operation was a success\n-        if (filtered_tokens.size() >= ctx->min_keep) {\n+        if (!filtered_tokens.empty() && filtered_tokens.size() >= ctx->min_keep) {\n             memcpy(cur_p->data, filtered_tokens.data(), filtered_tokens.size()*sizeof(llama_token_data));\n             cur_p->size = filtered_tokens.size();\n             min_p_applied = true;\n@@ -909,7 +909,7 @@ static void llama_sampler_typical_apply(struct llama_sampler * smpl, llama_token\n         cum_sum += cur_p->data[idx].p;\n \n         // Check if the running sum is greater than typical or if we have kept at least min_keep tokens\n-        if (cum_sum > ctx->p && i >= ctx->min_keep - 1) {\n+        if (cum_sum > ctx->p && (ctx->min_keep == 0 || i >= ctx->min_keep - 1)) {\n             last_idx = i + 1;\n             break;\n         }",
  "tests/test-sampling.cpp": "@@ -98,7 +98,7 @@ static void test_top_p(const std::vector<float> & probs, const std::vector<float\n     sampler_tester tester(probs, probs_expected);\n \n     DUMP(&tester.cur_p);\n-    tester.apply(llama_sampler_init_top_p(p, 1));\n+    tester.apply(llama_sampler_init_top_p(p, 0));\n     tester.apply(llama_sampler_init_dist (0));\n     DUMP(&tester.cur_p);\n \n@@ -109,7 +109,7 @@ static void test_min_p(const std::vector<float> & probs, const std::vector<float\n     sampler_tester tester(probs, probs_expected);\n \n     DUMP(&tester.cur_p);\n-    tester.apply(llama_sampler_init_min_p(p, 1));\n+    tester.apply(llama_sampler_init_min_p(p, 0));\n     tester.apply(llama_sampler_init_dist (0));\n     DUMP(&tester.cur_p);\n \n@@ -130,7 +130,7 @@ static void test_typical(const std::vector<float> & probs, const std::vector<flo\n     sampler_tester tester(probs, probs_expected);\n \n     DUMP(&tester.cur_p);\n-    tester.apply(llama_sampler_init_typical(p, 1));\n+    tester.apply(llama_sampler_init_typical(p, 0));\n     DUMP(&tester.cur_p);\n \n     tester.check();\n@@ -332,6 +332,7 @@ int main(void) {\n     test_min_p({0.1f, 0.2f, 0.3f, 0.4f}, {0.4f/0.7f, 0.3f/0.7f},                       0.74f);\n     test_min_p({0.1f, 0.2f, 0.3f, 0.4f}, {0.4f/0.4f},                                  0.76f);\n     test_min_p({0.1f, 0.2f, 0.3f, 0.4f}, {0.4f/0.4f},                                  1.00f);\n+    test_min_p({0.1f, 0.2f, 0.3f, 0.4f}, {0.4f/0.4f},                                  1.05f);\n \n     printf(\"XTC should:\\n\");\n     test_xtc({0.4f, 0.3f, 0.2f, 0.1f},   {0.1f},                                0.99f, 0.09f);\n@@ -341,8 +342,8 @@ int main(void) {\n     printf(\"XTC should not:\\n\");\n     test_xtc({0.4f, 0.3f, 0.2f, 0.1f},   {0.4f, 0.3f, 0.2f, 0.1f},              0.99f, 0.39f);\n \n-    test_typical({0.97f, 0.01f, 0.01f, 0.01f}, {0.97f}, 0.5f);\n-    test_typical({0.4f, 0.2f, 0.2f, 0.2f}, {0.2f, 0.2f, 0.2f}, 0.5f);\n+    test_typical({0.97f, 0.01f, 0.01f, 0.01f}, {0.97f},            0.5f);\n+    test_typical({0.4f, 0.2f, 0.2f, 0.2f},     {0.2f, 0.2f, 0.2f}, 0.5f);\n \n     test_penalties({0.2f, 0.2f, 0.2f, 0.2f, 0.2f}, {0}, {0.25f, 0.25f, 0.25f, 0.25f, 0},   50.0f, 0.0f, 0.0f);\n     test_penalties({0.2f, 0.2f, 0.2f, 0.2f, 0.2f}, {0, 1, 2}, {0.5f, 0.5f, 0, 0, 0},       50.0f, 0.0f, 0.0f);"
}