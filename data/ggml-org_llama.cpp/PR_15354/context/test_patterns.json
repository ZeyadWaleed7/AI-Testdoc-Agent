{
  "tests/test-backend-ops.cpp": {
    "content": "// This file defines tests for various GGML ops and backends.\n// For the forward pass it asserts that the results of multiple backends computing the same GGML ops are consistent.\n// For the backward pass it asserts that the gradients from backpropagation are consistent\n// with the gradients obtained via the method of finite differences (\"grad\" mode, this is optional).\n// It is also possible to check the performance (\"perf\" mode).\n//\n// this file has three sections: Section 1 does general setup, section 2 defines the GGML ops to be tested,\n// and section 3 defines which tests to run.\n// Quick start for adding a new GGML op: Go to section 2 and create a struct that inherits from test_case,\n// then go to section 3 and add an instantiation of your struct.\n\n\n// ##############################\n// ## Section 1: General Setup ##\n// ##############################\n\n\n#include <ggml.h>\n#include <ggml-alloc.h>\n#include <ggml-backend.h>\n#include <ggml-cpp.h>\n\n#include <algorithm>\n#include <array>\n#include <cfloat>\n#include <cinttypes>\n#include <cstdarg>\n#include <cstdint>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <future>\n#include <memory>\n#include <random>\n#include <regex>\n#include <string>\n#include <string_view>\n#include <thread>\n#include <vector>\n\nstatic void init_tensor_uniform(ggml_tensor * tensor, float min = -1.0f, float max = 1.0f) {\n    size_t nels = ggml_nelements(tensor);\n    std::vector<float> data(nels);\n    {\n        // parallel initialization\n        static const size_t n_threads = std::thread::hardware_concurrency();\n        // static RNG initialization (revisit if n_threads stops being constant)\n        static std::vector<std::default_random_engine> generators = []() {\n            std::random_device rd;\n            std::vector<std::default_random_engine> vec;\n            vec.reserve(n_threads);\n            //for (size_t i = 0; i < n_threads; i++) { vec.emplace_back(1234 + i); } // fixed seed\n            for (size_t i = 0; i ",
    "language": "cpp"
  }
}