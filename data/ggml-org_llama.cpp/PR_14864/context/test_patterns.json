{
  "tests/test-chat.cpp": {
    "content": "//  Tests chat handling, including grammar generation and parsing for tool calling, for various templates.\n//\n//  Also acts as a CLI to generate a Markdown summary of the formats of Jinja templates,\n//  e.g. given Minja (http://github.com/google/minja) checked out in parent dir:\n//\n//    cmake -B build && cmake --build build --parallel && ./build/bin/test-chat ../minja/build/tests/*.jinja 2>/dev/null\n//\n#include \"chat.h\"\n\n#include \"log.h\"\n\n#include \"../src/unicode.h\"\n#include \"../src/llama-grammar.h\"\n\n#include <nlohmann/json.hpp>\n\n#include <fstream>\n#include <iostream>\n#include <string>\n\nusing json = nlohmann::ordered_json;\n\nstatic std::ostream & operator<<(std::ostream & os, const common_chat_msg_diff & diff) {\n    os << \"{ content_delta: \" << diff.content_delta << \"; \";\n    os << \"reasoning_content_delta: \" << diff.reasoning_content_delta << \"; \";\n    if (diff.tool_call_index != std::string::npos) {\n        os << \"tool_call_index: \" << diff.tool_call_index << \"; \";\n        os << \"tool_call_delta.name: \" << diff.tool_call_delta.name << \"; \";\n        os << \"tool_call_delta.id: \" << diff.tool_call_delta.id << \"; \";\n        os << \"tool_call_delta.arguments: \" << diff.tool_call_delta.arguments << \"; \";\n    }\n    os << \"}\";\n    return os;\n}\n// operator<< for vector<common_chat_msg_diff>:\nstatic std::ostream & operator<<(std::ostream & os, const std::vector<common_chat_msg_diff> & diffs) {\n    os << \"[\\n\";\n    for (const auto & diff : diffs) {\n        os << \"  \" << diff << \",\\n\";\n    }\n    os << \"]\";\n    return os;\n}\nstatic std::ostream & operator<<(std::ostream & os, const common_chat_msg & msg) {\n    os << \"{ role: \" << msg.role << \"; \";\n    os << \"content: \" << msg.content << \"; \";\n    os << \"content_parts: [\\n\";\n    for (const auto & part : msg.content_parts) {\n        os << \"  { type: \" << part.type << \"; text: \" << part.text << \" },\\n\";\n    }\n    os << \"]; \";\n    os << \"reasoning_content: \" << msg.reasoning_content << \"; \";\n    os << \"tool_calls: [\\n\";\n    for (con",
    "language": "cpp"
  }
}