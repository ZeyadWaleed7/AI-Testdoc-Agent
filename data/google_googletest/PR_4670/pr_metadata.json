{
  "title": "resolve #4612 Feature add EXPECT/ASSERT_FLOAT/DOUBLE_NE (not equal)",
  "description": "A \"not equal\" feature was added to complement the \"equal\" feature for float and double. A simple way to negate the *_EQ is to use an internal macro, EXPECT_NONFATAL_FAILURE(stmt, substr):\r\n```\r\n// A macro for testing Google Test assertions or code that's expected to\r\n// generate Google Test non-fatal failures (e.g. a failure from an EXPECT_EQ,\r\n// but not from an ASSERT_EQ). It asserts that the given statement will cause\r\n// exactly one non-fatal Google Test failure with 'substr' being part of the\r\n// failure message.\r\n```\r\nThis is not meant to be used when using gtest. Instead, what is proposed is a way of testing for inequality that follows equality. Test cases were made that test the semantics of the macro. Test cases were not made where the internal testing is computed, since the underlying code for both are the same, except for minor adjustments that don't modify the underlying flow of the program.\r\n\r\nThe following macros were created:\r\n```\r\nEXPECT_FLOAT_NE\r\nEXPECT_DOUBLE_NE\r\nASSERT_FLOAT_NE\r\nASSERT_DOUBLE_NE\r\n```\r\nTwo helper functions were created:\r\n```\r\n::testing::internal::CmpHelperFloatingPointNE<float>\r\n::testing::internal::CmpHelperFloatingPointNE<double>\r\n```\r\n\r\nfixes #4612 ",
  "base_branch": "main",
  "head_branch": "main"
}