{
  "googletest/include/gtest/gtest.h": {
    "status": "modified",
    "patch": "@@ -1601,6 +1601,29 @@ AssertionResult CmpHelperFloatingPointEQ(const char* lhs_expression,\n                    false);\n }\n \n+template <typename RawType>\n+AssertionResult CmpHelperFloatingPointNE(const char* lhs_expression,\n+                                         const char* rhs_expression,\n+                                         RawType lhs_value, RawType rhs_value) {\n+  const FloatingPoint<RawType> lhs(lhs_value), rhs(rhs_value);\n+\n+  if (!lhs.AlmostEquals(rhs)) {\n+    return AssertionSuccess();\n+  }\n+\n+  ::std::stringstream lhs_ss;\n+  lhs_ss.precision(std::numeric_limits<RawType>::digits10 + 2);\n+  lhs_ss << lhs_value;\n+\n+  ::std::stringstream rhs_ss;\n+  rhs_ss.precision(std::numeric_limits<RawType>::digits10 + 2);\n+  rhs_ss << rhs_value;\n+\n+  return NeFailure(lhs_expression, rhs_expression,\n+                   StringStreamToString(&lhs_ss), StringStreamToString(&rhs_ss),\n+                   false);\n+}\n+\n // Helper function for implementing ASSERT_NEAR.\n //\n // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.\n@@ -1998,6 +2021,22 @@ class TestWithParam : public Test, public WithParamInterface<T> {};\n   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<double>, \\\n                       val1, val2)\n \n+#define EXPECT_FLOAT_NE(val1, val2)                                         \\\n+  EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointNE<float>, \\\n+                      val1, val2)\n+\n+#define EXPECT_DOUBLE_NE(val1, val2)                                         \\\n+  EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointNE<double>, \\\n+                      val1, val2)\n+\n+#define ASSERT_FLOAT_NE(val1, val2)                                         \\\n+  ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointNE<float>, \\\n+                      val1, val2)\n+\n+#define ASSERT_DOUBLE_NE(val1, val2)                                         \\\n+  ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointNE<double>, \\\n+                      val1, val2)\n+\n #define EXPECT_NEAR(val1, val2, abs_error)                                   \\\n   EXPECT_PRED_FORMAT3(::testing::internal::DoubleNearPredFormat, val1, val2, \\\n                       abs_error)",
    "additions": 39,
    "deletions": 0,
    "changes": 39,
    "language": "h",
    "imports": [],
    "full_content": "// Copyright 2005, Google Inc.\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n// The Google C++ Testing and Mocking Framework (Google Test)\n//\n// This header file defines the public API for Google Test.  It should be\n// included by any test program that uses Google Test.\n//\n// IMPORTANT NOTE: Due to limitation of the C++ language, we have to\n// leave some internal implementation details in this header file.\n// They are clearly marked by comments like this:\n//\n//   // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PR",
    "raw_url": "https://github.com/google/googletest/raw/d38cdaefc2b0f0f1acc3fbdec4bc747c6a533b58/googletest%2Finclude%2Fgtest%2Fgtest.h",
    "is_test_file": false
  },
  "googletest/include/gtest/internal/gtest-internal.h": {
    "status": "modified",
    "patch": "@@ -207,6 +207,12 @@ GTEST_API_ AssertionResult EqFailure(const char* expected_expression,\n                                      const std::string& actual_value,\n                                      bool ignoring_case);\n \n+GTEST_API_ AssertionResult NeFailure(const char* expected_expression,\n+                                     const char* actual_expression,\n+                                     const std::string& expected_value,\n+                                     const std::string& actual_value,\n+                                     bool ignoring_case);\n+\n // Constructs a failure message for Boolean assertions such as EXPECT_TRUE.\n GTEST_API_ std::string GetBoolAssertionFailureMessage(\n     const AssertionResult& assertion_result, const char* expression_text,",
    "additions": 6,
    "deletions": 0,
    "changes": 6,
    "language": "h",
    "imports": [],
    "full_content": "// Copyright 2005, Google Inc.\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n// The Google C++ Testing and Mocking Framework (Google Test)\n//\n// This header file declares functions and macros used internally by\n// Google Test.  They are subject to change without notice.\n\n// IWYU pragma: private, include \"gtest/gtest.h\"\n// IWYU pragma: friend gtest/.*\n// IWYU pragma: friend gmock/.*\n\n#ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_\n#define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_\n\n#include \"gte",
    "raw_url": "https://github.com/google/googletest/raw/d38cdaefc2b0f0f1acc3fbdec4bc747c6a533b58/googletest%2Finclude%2Fgtest%2Finternal%2Fgtest-internal.h",
    "is_test_file": false
  },
  "googletest/src/gtest.cc": {
    "status": "modified",
    "patch": "@@ -1647,6 +1647,37 @@ AssertionResult EqFailure(const char* lhs_expression,\n   return AssertionFailure() << msg;\n }\n \n+AssertionResult NeFailure(const char* lhs_expression,\n+                          const char* rhs_expression,\n+                          const std::string& lhs_value,\n+                          const std::string& rhs_value, bool ignoring_case) {\n+  Message msg;\n+  msg << \"Expected inequality of these values:\";\n+  msg << \"\\n  \" << lhs_expression;\n+  if (lhs_value != lhs_expression) {\n+    msg << \"\\n    Which is: \" << lhs_value;\n+  }\n+  msg << \"\\n  \" << rhs_expression;\n+  if (rhs_value != rhs_expression) {\n+    msg << \"\\n    Which is: \" << rhs_value;\n+  }\n+\n+  if (ignoring_case) {\n+    msg << \"\\nIgnoring case\";\n+  }\n+\n+  if (!lhs_value.empty() && !rhs_value.empty()) {\n+    const std::vector<std::string> lhs_lines = SplitEscapedString(lhs_value);\n+    const std::vector<std::string> rhs_lines = SplitEscapedString(rhs_value);\n+    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {\n+      msg << \"\\nWith diff:\\n\"\n+          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);\n+    }\n+  }\n+\n+  return AssertionFailure() << msg;\n+}\n+\n // Constructs a failure message for Boolean assertions such as EXPECT_TRUE.\n std::string GetBoolAssertionFailureMessage(\n     const AssertionResult& assertion_result, const char* expression_text,",
    "additions": 31,
    "deletions": 0,
    "changes": 31,
    "language": "cc",
    "imports": [],
    "full_content": "// Copyright 2005, Google Inc.\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n//\n// The Google C++ Testing and Mocking Framework (Google Test)\n\n#include \"gtest/gtest.h\"\n\n#include <ctype.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <wchar.h>\n#include <wctype.h>\n\n#include <algorithm>\n#include <chrono>  // NOLINT\n#include <cmath>\n#include <csignal>  // NOLINT: raise(3) is used on some platforms\n#include <cstdint>\n#include <cstdlib>\n#include <cstring>\n#include <initializer_lis",
    "raw_url": "https://github.com/google/googletest/raw/d38cdaefc2b0f0f1acc3fbdec4bc747c6a533b58/googletest%2Fsrc%2Fgtest.cc",
    "is_test_file": true
  },
  "googletest/test/gtest_unittest.cc": {
    "status": "modified",
    "patch": "@@ -2826,6 +2826,10 @@ TEST_F(FloatTest, Zeros) {\n   EXPECT_FLOAT_EQ(0.0, -0.0);\n   EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(-0.0, 1.0), \"1.0\");\n   EXPECT_FATAL_FAILURE(ASSERT_FLOAT_EQ(0.0, 1.5), \"1.5\");\n+\n+  EXPECT_FLOAT_NE(-0.0, 1.0);\n+  EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_NE(-0.0,0.0), \"0.0\");\n+  EXPECT_FATAL_FAILURE(ASSERT_FLOAT_NE(-0.0, 0.0), \"0.0\");\n }\n \n // Tests comparing numbers close to 0.\n@@ -2851,18 +2855,41 @@ TEST_F(FloatTest, AlmostZeros) {\n         ASSERT_FLOAT_EQ(v.close_to_positive_zero, v.further_from_negative_zero);\n       },\n       \"v.further_from_negative_zero\");\n+\n+  EXPECT_FLOAT_NE(v.close_to_positive_zero, v.further_from_negative_zero);\n+  \n+  EXPECT_FATAL_FAILURE(\n+      {  // NOLINT\n+        ASSERT_FLOAT_NE(0.0, v.close_to_positive_zero);\n+        ASSERT_FLOAT_NE(v.close_to_negative_zero, v.close_to_positive_zero);\n+      },\n+      \"v.close_to_positive_zero\");\n+\n+  EXPECT_FATAL_FAILURE(\n+      {  // NOLINT\n+        ASSERT_FLOAT_NE(-0.0, v.close_to_negative_zero);\n+        ASSERT_FLOAT_NE(v.close_to_positive_zero, v.close_to_negative_zero);\n+      },\n+      \"v.close_to_negative_zero\");\n+\n }\n \n // Tests comparing numbers close to each other.\n TEST_F(FloatTest, SmallDiff) {\n   EXPECT_FLOAT_EQ(1.0, values_.close_to_one);\n   EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(1.0, values_.further_from_one),\n                           \"values_.further_from_one\");\n+\n+  EXPECT_FLOAT_NE(1.0, values_.further_from_one);\n+  EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_NE(1.0, values_.close_to_one), \n+                          \"values_.close_to_one\");\n }\n \n // Tests comparing numbers far apart.\n TEST_F(FloatTest, LargeDiff) {\n   EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(2.5, 3.0), \"3.0\");\n+\n+  EXPECT_FLOAT_NE(2.5, 3.5);\n }\n \n // Tests comparing with infinity.\n@@ -2920,6 +2947,12 @@ TEST_F(FloatTest, Commutative) {\n   // We already tested EXPECT_FLOAT_EQ(1.0, values_.further_from_one).\n   EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(values_.further_from_one, 1.0),\n                           \"1.0\");\n+\n+  // We already tested EXPECT_FLOAT_NE(1.0, values_.close_to_one).\n+  EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_NE(values_.close_to_one, 1.0), \"1.0\");\n+\n+  // We already tested EXPECT_FLOAT_NE(1.0, values_.further_from_one).\n+  EXPECT_FLOAT_NE(values_.further_from_one, 1.0);\n }\n \n // Tests EXPECT_NEAR.\n@@ -3007,6 +3040,10 @@ TEST_F(DoubleTest, Zeros) {\n   EXPECT_DOUBLE_EQ(0.0, -0.0);\n   EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(-0.0, 1.0), \"1.0\");\n   EXPECT_FATAL_FAILURE(ASSERT_DOUBLE_EQ(0.0, 1.0), \"1.0\");\n+\n+  EXPECT_DOUBLE_NE(-0.0, 1.0);\n+  EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_NE(-0.0, 0.0), \"0.0\");\n+  EXPECT_FATAL_FAILURE(ASSERT_DOUBLE_NE(-0.0, 0.0), \"0.0\");\n }\n \n // Tests comparing numbers close to 0.\n@@ -3033,18 +3070,44 @@ TEST_F(DoubleTest, AlmostZeros) {\n                          v.further_from_negative_zero);\n       },\n       \"v.further_from_negative_zero\");\n+\n+  EXPECT_DOUBLE_NE(v.close_to_positive_zero, v.further_from_negative_zero);\n+\n+  EXPECT_FATAL_FAILURE(\n+      {  // NOLINT\n+        ASSERT_DOUBLE_NE(0.0, \n+                         v.close_to_positive_zero);\n+        ASSERT_DOUBLE_NE(v.close_to_negative_zero, \n+                         v.close_to_positive_zero);\n+      },\n+      \"v.close_to_positive_zero\");\n+\n+  EXPECT_FATAL_FAILURE(\n+      {  // NOLINT\n+        ASSERT_DOUBLE_NE(-0.0, \n+                         v.close_to_negative_zero);\n+        ASSERT_DOUBLE_NE(v.close_to_positive_zero, \n+                         v.close_to_negative_zero);\n+      },\n+      \"v.close_to_negative_zero\");\n }\n \n // Tests comparing numbers close to each other.\n TEST_F(DoubleTest, SmallDiff) {\n   EXPECT_DOUBLE_EQ(1.0, values_.close_to_one);\n   EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(1.0, values_.further_from_one),\n                           \"values_.further_from_one\");\n+\n+  EXPECT_DOUBLE_NE(1.0, values_.further_from_one);\n+  EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_NE(1.0, values_.close_to_one),\n+                          \"values_.close_to_one\");\n }\n \n // Tests comparing numbers far apart.\n TEST_F(DoubleTest, LargeDiff) {\n   EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(2.0, 3.0), \"3.0\");\n+\n+  EXPECT_DOUBLE_NE(2.0, 3.0);\n }\n \n // Tests comparing with infinity.\n@@ -3097,6 +3160,12 @@ TEST_F(DoubleTest, Commutative) {\n   // We already tested EXPECT_DOUBLE_EQ(1.0, values_.further_from_one).\n   EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(values_.further_from_one, 1.0),\n                           \"1.0\");\n+\n+  // We already tested EXPECT_DOUBLE_NE(1.0, values_.close_to_one).\n+  EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_NE(values_.close_to_one, 1.0), \"1.0\");\n+\n+  // We already tested EXPECT_FLOAT_NE(1.0, values_.further_from_one).\n+  EXPECT_DOUBLE_NE(values_.further_from_one, 1.0);\n }\n \n // Tests EXPECT_NEAR.",
    "additions": 69,
    "deletions": 0,
    "changes": 69,
    "language": "cc",
    "imports": [],
    "full_content": "// Copyright 2005, Google Inc.\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n//\n// Tests for Google Test itself.  This verifies that the basic constructs of\n// Google Test work.\n\n#include \"gtest/gtest.h\"\n\n// Verifies that the command line flag variables can be accessed in\n// code once \"gtest.h\" has been #included.\n// Do not move it after other gtest #includes.\nTEST(CommandLineFlagsTest, CanBeAccessedInCodeOnceGTestHIsIncluded) {\n  bool dummy =\n      GTEST_FLAG_GET(also_run_disabled_tests) ||\n      GTEST_FLAG_GET(br",
    "raw_url": "https://github.com/google/googletest/raw/d38cdaefc2b0f0f1acc3fbdec4bc747c6a533b58/googletest%2Ftest%2Fgtest_unittest.cc",
    "is_test_file": true
  }
}