{
  "documentation/src/docs/asciidoc/release-notes/release-notes-6.0.0-RC1.adoc": "@@ -26,8 +26,7 @@ repository on GitHub.\n [[release-notes-6.0.0-RC1-junit-platform-new-features-and-improvements]]\n ==== New Features and Improvements\n \n-* \u2753\n-\n+* Prune stack traces up to test or lifecycle method\n \n [[release-notes-6.0.0-RC1-junit-jupiter]]\n === JUnit Jupiter",
  "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ExceptionUtils.java": "@@ -97,11 +97,15 @@ public static String readStackTrace(Throwable throwable) {\n \t}\n \n \t/**\n-\t * Prune the stack trace of the supplied {@link Throwable} by removing\n-\t * {@linkplain StackTraceElement stack trace elements} from the {@code org.junit},\n-\t * {@code jdk.internal.reflect}, and {@code sun.reflect} packages. If a\n-\t * {@code StackTraceElement} matching one of the supplied {@code classNames}\n-\t * is encountered, all subsequent elements in the stack trace will be retained.\n+\t * Prune the stack trace of the supplied {@link Throwable}.\n+\t *\n+\t * <p>Prune all {@linkplain StackTraceElement stack trace elements} up one\n+\t * of the supplied {@code classNames} are pruned. All subsequent elements\n+\t * in the stack trace will be retained.\n+\t *\n+\t * <p>If the {@code classNames} do not match any of the stacktrace elements\n+\t * then the {@code org.junit}, {@code jdk.internal.reflect}, and\n+\t * {@code sun.reflect} packages are pruned.\n \t *\n \t * <p>Additionally, all elements prior to and including the first JUnit Platform\n \t * Launcher call will be removed.\n@@ -128,6 +132,9 @@ public static void pruneStackTrace(Throwable throwable, List<String> classNames)\n \t\t\tString className = element.getClassName();\n \n \t\t\tif (classNames.contains(className)) {\n+\t\t\t\t// We found the test\n+\t\t\t\t// everything before that is not informative.\n+\t\t\t\tprunedStackTrace.clear();\n \t\t\t\t// Include all elements called by the test\n \t\t\t\tprunedStackTrace.addAll(stackTrace.subList(i, stackTrace.size()));\n \t\t\t\tbreak;",
  "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/StackTracePruningEngineExecutionListener.java": "@@ -13,6 +13,7 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n+import java.util.stream.Stream;\n \n import org.junit.platform.commons.util.ExceptionUtils;\n import org.junit.platform.engine.EngineExecutionListener;\n@@ -46,8 +47,9 @@ public void executionFinished(TestDescriptor testDescriptor, TestExecutionResult\n \t}\n \n \tprivate static List<String> getTestClassNames(TestDescriptor testDescriptor) {\n-\t\treturn testDescriptor.getAncestors() //\n-\t\t\t\t.stream() //\n+\t\tStream<? extends TestDescriptor> self = Stream.of(testDescriptor);\n+\t\tStream<? extends TestDescriptor> ancestors = testDescriptor.getAncestors().stream();\n+\t\treturn Stream.concat(self, ancestors) //\n \t\t\t\t.map(TestDescriptor::getSource) //\n \t\t\t\t.flatMap(Optional::stream) //\n \t\t\t\t.map(source -> {",
  "platform-tests/src/test/java/org/junit/platform/StackTracePruningTests.java": "@@ -115,7 +115,7 @@ void shouldAlwaysKeepJupiterAssumptionStackTraceElement() {\n \t}\n \n \t@Test\n-\tvoid shouldKeepEverythingAfterTestCall() {\n+\tvoid shouldKeepExactlyEverythingAfterTestCall() {\n \t\tEngineExecutionResults results = EngineTestKit.engine(\"junit-jupiter\") //\n \t\t\t\t.configurationParameter(\"junit.platform.stacktrace.pruning.enabled\", \"true\") //\n \t\t\t\t.selectors(selectMethod(FailingTestTestCase.class, \"failingAssertion\")) //\n@@ -128,15 +128,14 @@ void shouldKeepEverythingAfterTestCall() {\n \t\t\t\t\t\\\\Qorg.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:\\\\E.+\n \t\t\t\t\t\\\\Qorg.junit.jupiter.api.Assertions.fail(Assertions.java:\\\\E.+\n \t\t\t\t\t\\\\Qorg.junit.platform.StackTracePruningTests$FailingTestTestCase.failingAssertion(StackTracePruningTests.java:\\\\E.+\n-\t\t\t\t\t>>>>\n \t\t\t\t\t\"\"\");\n \t}\n \n \t@ParameterizedTest\n \t@ValueSource(strings = { \"org.junit.platform.StackTracePruningTests$FailingBeforeEachTestCase\",\n \t\t\t\"org.junit.platform.StackTracePruningTests$FailingBeforeEachTestCase$NestedTestCase\",\n \t\t\t\"org.junit.platform.StackTracePruningTests$FailingBeforeEachTestCase$NestedTestCase$NestedNestedTestCase\" })\n-\tvoid shouldKeepEverythingAfterLifecycleMethodCall(Class<?> methodClass) {\n+\tvoid shouldKeepExactlyEverythingAfterLifecycleMethodCall(Class<?> methodClass) {\n \t\tEngineExecutionResults results = EngineTestKit.engine(\"junit-jupiter\") //\n \t\t\t\t.configurationParameter(\"junit.platform.stacktrace.pruning.enabled\", \"true\") //\n \t\t\t\t.selectors(selectMethod(methodClass, \"test\")) //\n@@ -149,7 +148,6 @@ void shouldKeepEverythingAfterLifecycleMethodCall(Class<?> methodClass) {\n \t\t\t\t\t\\\\Qorg.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:\\\\E.+\n \t\t\t\t\t\\\\Qorg.junit.jupiter.api.Assertions.fail(Assertions.java:\\\\E.+\n \t\t\t\t\t\\\\Qorg.junit.platform.StackTracePruningTests$FailingBeforeEachTestCase.setUp(StackTracePruningTests.java:\\\\E.+\n-\t\t\t\t\t>>>>\n \t\t\t\t\t\"\"\");\n \t}\n "
}