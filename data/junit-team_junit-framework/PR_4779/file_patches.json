{
  "documentation/src/test/java/example/session/HttpTests.java": "@@ -50,7 +50,7 @@ public boolean supportsParameter(ParameterContext parameterContext, ExtensionCon\n \t}\n \n \t//end::user_guide[]\n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t//tag::user_guide[]\n \t@Override\n \tpublic Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {",
  "documentation/src/test/java/example/sharedresources/SharedResourceDemo.java": "@@ -24,7 +24,7 @@\n \n class SharedResourceDemo {\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t//tag::user_guide[]\n \t@Test\n \tvoid runBothCustomEnginesTest() {",
  "documentation/src/test/java/example/timing/TimingExtension.java": "@@ -41,7 +41,7 @@ public void beforeTestExecution(ExtensionContext context) {\n \t}\n \n \t//end::user_guide[]\n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t//tag::user_guide[]\n \t@Override\n \tpublic void afterTestExecution(ExtensionContext context) {",
  "gradle/plugins/common/src/main/kotlin/junitbuild.java-nullability-conventions.gradle.kts": "@@ -64,6 +64,8 @@ tasks.withType<JavaCompile>().configureEach {\n \t\t\tisJSpecifyMode = true\n \t\t\tcustomContractAnnotations.add(\"org.junit.platform.commons.annotation.Contract\")\n \t\t\tcheckContracts = true\n+\t\t\t// FIXME a new gradle-nullaway-plugin version is needed for a proper DSL\n+\t\t\tcheckOptions.put(\"NullAway:SuppressionNameAliases\", \"DataFlowIssue\")\n \t\t}\n \t}\n }",
  "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java": "@@ -88,7 +88,7 @@ private boolean invokeConditionMethod(Method method, ExtensionContext context) {\n \t\treturn invokeMethod(method, context, testInstance);\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \tprivate static boolean invokeMethod(Method method, ExtensionContext context, @Nullable Object testInstance) {\n \t\tif (method.getParameterCount() == 0) {\n \t\t\treturn (boolean) ReflectionSupport.invokeMethod(method, testInstance);",
  "jupiter-tests/src/test/java/org/junit/jupiter/api/AssertAllAssertionsTests.java": "@@ -37,25 +37,25 @@\n  */\n class AssertAllAssertionsTests {\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid assertAllWithNullExecutableArray() {\n \t\tassertPrecondition(\"executables array must not be null or empty\", () -> assertAll((Executable[]) null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid assertAllWithNullExecutableCollection() {\n \t\tassertPrecondition(\"executables collection must not be null\", () -> assertAll((Collection<Executable>) null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid assertAllWithNullExecutableStream() {\n \t\tassertPrecondition(\"executables stream must not be null\", () -> assertAll((Stream<Executable>) null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid assertAllWithNullInExecutableArray() {\n \t\tassertPrecondition(\"individual executables must not be null\", () -> assertAll((Executable) null));",
  "jupiter-tests/src/test/java/org/junit/jupiter/api/AssertLinesMatchAssertionsTests.java": "@@ -95,7 +95,7 @@ void assertLinesMatchUsingFastForwardMarkerWithLimit3() {\n \t}\n \n \t@Test\n-\t@SuppressWarnings({ \"unchecked\", \"rawtypes\", \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings({ \"unchecked\", \"rawtypes\", \"DataFlowIssue\" })\n \tvoid assertLinesMatchWithNullFails() {\n \t\tassertThrows(PreconditionViolationException.class, () -> assertLinesMatch(null, (List) null));\n \t\tassertThrows(PreconditionViolationException.class, () -> assertLinesMatch(null, Collections.emptyList()));",
  "jupiter-tests/src/test/java/org/junit/jupiter/api/DynamicTestTests.java": "@@ -43,7 +43,7 @@ class DynamicTestTests {\n \n \tprivate final List<@Nullable String> assertedValues = new ArrayList<>();\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid streamFromStreamPreconditions() {\n \t\tThrowingConsumer<Object> testExecutor = input -> {\n@@ -58,7 +58,7 @@ void streamFromStreamPreconditions() {\n \t\t\t() -> DynamicTest.stream(Stream.empty(), displayNameGenerator, null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid streamFromIteratorPreconditions() {\n \t\tThrowingConsumer<Object> testExecutor = input -> {\n@@ -73,7 +73,7 @@ void streamFromIteratorPreconditions() {\n \t\t\t() -> DynamicTest.stream(emptyIterator(), displayNameGenerator, null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid streamFromStreamWithNamesPreconditions() {\n \t\tThrowingConsumer<Object> testExecutor = input -> {\n@@ -84,7 +84,7 @@ void streamFromStreamWithNamesPreconditions() {\n \t\tassertThrows(PreconditionViolationException.class, () -> DynamicTest.stream(Stream.empty(), null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid streamFromIteratorWithNamesPreconditions() {\n \t\tThrowingConsumer<Object> testExecutor = input -> {\n@@ -95,14 +95,14 @@ void streamFromIteratorWithNamesPreconditions() {\n \t\tassertThrows(PreconditionViolationException.class, () -> DynamicTest.stream(emptyIterator(), null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid streamFromStreamWithNamedExecutablesPreconditions() {\n \t\tassertThrows(PreconditionViolationException.class,\n \t\t\t() -> DynamicTest.stream((Stream<DummyNamedExecutableForTests>) null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid streamFromIteratorWithNamedExecutablesPreconditions() {\n \t\tassertThrows(PreconditionViolationException.class,",
  "jupiter-tests/src/test/java/org/junit/jupiter/api/FailAssertionsTests.java": "@@ -74,7 +74,7 @@ void failWithNullString() {\n \t\t}\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid failWithNullMessageSupplier() {\n \t\ttry {",
  "jupiter-tests/src/test/java/org/junit/jupiter/api/extension/MediaTypeTests.java": "@@ -45,7 +45,7 @@ void parseWithInvalidMediaType() {\n \t\tassertEquals(\"Invalid media type: 'invalid'\", exception.getMessage());\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid parseWithNullMediaType() {\n \t\tvar exception = assertThrows(PreconditionViolationException.class, () -> MediaType.parse(null));",
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/ReportingTests.java": "@@ -115,7 +115,7 @@ void succeedingTest(TestReporter reporter) {\n \t\t\t\tfile -> Files.writeString(file, \"succeedingTest\"));\n \t\t}\n \n-\t\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t\t@SuppressWarnings(\"DataFlowIssue\")\n \t\t@Test\n \t\tvoid invalidReportData(TestReporter reporter) {\n ",
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/config/DefaultJupiterConfigurationTests.java": "@@ -44,7 +44,7 @@ class DefaultJupiterConfigurationTests {\n \n \tprivate static final String KEY = DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME;\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid getDefaultTestInstanceLifecyclePreconditions() {\n \t\tPreconditionViolationException exception = assertThrows(PreconditionViolationException.class,",
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/descriptor/DisplayNameUtilsTests.java": "@@ -218,7 +218,7 @@ class NestedTestCase {\n \n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \tstatic class NullDisplayNameGenerator implements DisplayNameGenerator {\n \n \t\t@Override",
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/descriptor/LauncherStoreFacadeTest.java": "@@ -79,7 +79,7 @@ void returnsNamespaceAwareStore() {\n \t\tassertNotNull(adapter);\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid throwsExceptionWhenNamespaceIsNull() {\n \t\tLauncherStoreFacade facade = new LauncherStoreFacade(requestLevelStore);",
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/descriptor/TestInstanceLifecycleUtilsTests.java": "@@ -48,7 +48,7 @@ class TestInstanceLifecycleUtilsTests {\n \n \tprivate static final String KEY = DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME;\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid getTestInstanceLifecyclePreconditions() {\n \t\tPreconditionViolationException exception = assertThrows(PreconditionViolationException.class,",
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/execution/ParameterResolutionUtilsTests.java": "@@ -149,7 +149,7 @@ void onlyConsiderParameterResolversThatSupportAParticularParameter() {\n \t\tassertThat(arguments).containsExactly(\"something\");\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid passContextInformationToParameterResolverMethods() {\n \t\tanyTestMethodWithAtLeastOneParameter();",
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/CloseablePathTests.java": "@@ -167,7 +167,7 @@ void factoryReturnsDirectoryOnNonDefaultFileSystemWithPath() throws IOException\n \t\t\tdelete(closeablePath.get());\n \t\t}\n \n-\t\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t\t@SuppressWarnings(\"DataFlowIssue\")\n \t\t@DisplayName(\"fails if the factory returns null\")\n \t\t@ParameterizedTest\n \t\t@ElementTypeSource",
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/OrderedMethodTests.java": "@@ -744,7 +744,7 @@ public void orderMethods(MethodOrdererContext context) {\n \t\t\tcontext.getMethodDescriptors().set(1, createMethodDescriptorImpersonator(method2));\n \t\t}\n \n-\t\t@SuppressWarnings({ \"unchecked\", \"DataFlowIssue\" })\n+\t\t@SuppressWarnings(\"unchecked\")\n \t\tstatic <T> T createMethodDescriptorImpersonator(MethodDescriptor method) {\n \t\t\tMethodDescriptor stub = new MethodDescriptor() {\n \t\t\t\t@Override",
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/TempDirectoryTests.java": "@@ -357,7 +357,7 @@ void doesNotSupportCustomDefaultTempDirFactoryNotReturningDirectory() {\n \n \t\tprivate static class FactoryNotReturningDirectory implements TempDirFactory {\n \n-\t\t\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t\t\t@SuppressWarnings(\"DataFlowIssue\")\n \t\t\t@Override\n \t\t\tpublic Path createTempDirectory(AnnotatedElementContext elementContext, ExtensionContext extensionContext) {\n \t\t\t\treturn null;\n@@ -1475,7 +1475,7 @@ void test(@SuppressWarnings(\"unused\") @TempDir(factory = Factory.class) Path tem\n \t\t\t// never called\n \t\t}\n \n-\t\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t\t@SuppressWarnings(\"DataFlowIssue\")\n \t\tprivate static class Factory implements TempDirFactory {\n \n \t\t\t@Override",
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/TestInstanceFactoryTests.java": "@@ -775,7 +775,7 @@ private static class LegacyInstanceFactory extends AbstractTestInstanceFactory {\n \t */\n \tprivate static class NullTestInstanceFactory implements TestInstanceFactory {\n \n-\t\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t\t@SuppressWarnings(\"DataFlowIssue\")\n \t\t@Override\n \t\tpublic Object createTestInstance(TestInstanceFactoryContext factoryContext, ExtensionContext extensionContext) {\n \t\t\treturn null;",
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/TestReporterParameterResolverTests.java": "@@ -31,7 +31,7 @@ class TestReporterParameterResolverTests {\n \n \tTestReporterParameterResolver resolver = new TestReporterParameterResolver();\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid supports() {\n \t\tParameter parameter1 = findParameterOfMethod(\"methodWithTestReporterParameter\", TestReporter.class);",
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/TimeoutExceptionFactoryTests.java": "@@ -51,7 +51,7 @@ void createExceptionWithMethodSignatureTimeoutAndThrowable() {\n \t\t\t\t.hasSuppressedException(suppressedException);\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\", \"ThrowableNotThrown\" })\n+\t@SuppressWarnings({ \"DataFlowIssue\", \"ThrowableNotThrown\" })\n \t@Nested\n \t@DisplayName(\"throws exception when\")\n \tclass ThrowException {",
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/TimeoutInvocationFactoryTests.java": "@@ -61,23 +61,23 @@ void setUp() {\n \t\ttimeoutInvocationFactory = new TimeoutInvocationFactory(store);\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \t@DisplayName(\"throws exception when null store is provided on create\")\n \tvoid shouldThrowExceptionWhenInstantiatingWithNullStore() {\n \t\tassertThatThrownBy(() -> new TimeoutInvocationFactory(null)) //\n \t\t\t\t.hasMessage(\"store must not be null\");\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \t@DisplayName(\"throws exception when null timeout thread mode is provided on create\")\n \tvoid shouldThrowExceptionWhenNullTimeoutThreadModeIsProvidedWhenCreate() {\n \t\tassertThatThrownBy(() -> timeoutInvocationFactory.create(null, parameters)) //\n \t\t\t\t.hasMessage(\"thread mode must not be null\");\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \t@DisplayName(\"throws exception when null timeout invocation parameters is provided on create\")\n \tvoid shouldThrowExceptionWhenNullTimeoutInvocationParametersIsProvidedWhenCreate() {",
  "jupiter-tests/src/test/java/org/junit/jupiter/params/aggregator/DefaultArgumentsAccessorTests.java": "@@ -30,7 +30,7 @@\n  */\n class DefaultArgumentsAccessorTests {\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid argumentsMustNotBeNull() {\n \t\tassertThrows(PreconditionViolationException.class, () -> defaultArgumentsAccessor(1, (Object[]) null));",
  "jupiter-tests/src/test/java/org/junit/jupiter/params/converter/TypedArgumentConverterTests.java": "@@ -48,7 +48,7 @@ class UnitTests {\n \t\t/**\n \t\t * @since 5.8\n \t\t */\n-\t\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t\t@SuppressWarnings(\"DataFlowIssue\")\n \t\t@Test\n \t\tvoid preconditions() {\n \t\t\tassertThatExceptionOfType(PreconditionViolationException.class)//",
  "jupiter-tests/src/test/java/org/junit/jupiter/params/provider/AnnotationBasedArgumentsProviderTests.java": "@@ -38,7 +38,7 @@ protected Stream<? extends Arguments> provideArguments(\n \t\t}\n \t};\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \t@DisplayName(\"should throw exception when null annotation is provided to accept method\")\n \tvoid shouldThrowExceptionWhenNullAnnotationIsProvidedToAccept() {",
  "jupiter-tests/src/test/java/org/junit/jupiter/params/provider/MethodArgumentsProviderTests.java": "@@ -773,7 +773,7 @@ private static Object[] array(Object... objects) {\n \t\treturn provider.provideArguments(mock(), extensionContext).map(Arguments::get);\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \tprivate DefaultExecutableInvoker getExecutableInvoker(ExtensionContext extensionContext) {\n \t\treturn new DefaultExecutableInvoker(extensionContext, extensionRegistry);\n \t}",
  "platform-tests/src/test/java/org/junit/platform/commons/function/TryTests.java": "@@ -72,7 +72,7 @@ void failedTriesCanBeTransformed() throws Exception {\n \t\tassertThat(exception.get()).isSameAs(cause);\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid successfulTriesCanStoreNull() throws Exception {\n \t\tvar success = Try.success(null);\n@@ -101,7 +101,7 @@ void triesWithSameContentAreEqual() {\n \t\tassertThat(failure).isEqualTo(Try.failure(cause));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid methodPreconditionsAreChecked() {\n \t\tassertThrows(JUnitException.class, () -> Try.call(null));",
  "platform-tests/src/test/java/org/junit/platform/commons/support/AnnotationSupportTests.java": "@@ -35,7 +35,7 @@\n  */\n class AnnotationSupportTests {\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid isAnnotatedPreconditions() {\n \t\tvar optional = Optional.of(Probe.class);\n@@ -59,7 +59,7 @@ void isAnnotatedDelegates() {\n \t\t\tAnnotationSupport.isAnnotated(element, Override.class));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid findAnnotationOnElementPreconditions() {\n \t\tvar optional = Optional.of(Probe.class);\n@@ -84,7 +84,7 @@ void findAnnotationOnElementDelegates() {\n \t\t\tAnnotationSupport.findAnnotation(element, Override.class));\n \t}\n \n-\t@SuppressWarnings({ \"deprecation\", \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings({ \"deprecation\", \"DataFlowIssue\" })\n \t@Test\n \tvoid findAnnotationOnClassWithSearchModePreconditions() {\n \t\tassertPreconditionViolationException(\"annotationType\",\n@@ -93,7 +93,7 @@ void findAnnotationOnClassWithSearchModePreconditions() {\n \t\t\t() -> AnnotationSupport.findAnnotation(Probe.class, Override.class, (SearchOption) null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid findAnnotationOnClassWithEnclosingInstanceTypesPreconditions() {\n \t\tassertPreconditionViolationException(\"enclosingInstanceTypes\",\n@@ -135,7 +135,7 @@ void findAnnotationOnClassWithEnclosingInstanceTypes() {\n \t\t\t\t.contains(Probe.class.getDeclaredAnnotation(Tag.class));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid findPublicAnnotatedFieldsPreconditions() {\n \t\tassertPreconditionViolationException(\"Class\",\n@@ -154,7 +154,7 @@ void findPublicAnnotatedFieldsDelegates() {\n \t\t\tAnnotationSupport.findPublicAnnotatedFields(Probe.class, Throwable.class, Override.class));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid findAnnotatedMethodsPreconditions() {\n \t\tassertPreconditionViolationException(\"Class\",\n@@ -199,7 +199,7 @@ void findRepeatableAnnotationsDelegates() throws Throwable {\n \t\tassertEquals(expected.toString(), actual.toString(), \"expected equal exception toString representation\");\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid findRepeatableAnnotationsPreconditions() {\n \t\tassertPreconditionViolationException(\"annotationType\",\n@@ -225,7 +225,7 @@ void findAnnotatedFieldsDelegates() {\n \t\t\t\tHierarchyTraversalMode.TOP_DOWN));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid findAnnotatedFieldsPreconditions() {\n \t\tassertPreconditionViolationException(\"Class\",\n@@ -277,7 +277,7 @@ void findAnnotatedFieldValuesForStaticFieldsByType() {\n \t\t\t\t.containsExactlyInAnyOrder(\"s1\", \"s2\");\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid findAnnotatedFieldValuesPreconditions() {\n \t\tassertPreconditionViolationException(\"instance\",",
  "platform-tests/src/test/java/org/junit/platform/commons/support/ClassSupportTests.java": "@@ -24,7 +24,7 @@\n  */\n class ClassSupportTests {\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid nullSafeToStringPreconditions() {\n \t\tFunction<? super Class<?>, ? extends String> mapper = null;"
}