{
  "documentation/src/test/java/example/session/HttpTests.java": {
    "status": "modified",
    "patch": "@@ -50,7 +50,7 @@ public boolean supportsParameter(ParameterContext parameterContext, ExtensionCon\n \t}\n \n \t//end::user_guide[]\n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t//tag::user_guide[]\n \t@Override\n \tpublic Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.junit.jupiter.api.Assertions.assertEquals;",
      "import java.io.IOException;",
      "import java.net.HttpURLConnection;",
      "import java.net.URI;",
      "import java.net.URL;",
      "import com.sun.net.httpserver.HttpServer;",
      "import org.junit.jupiter.api.Test;",
      "import org.junit.jupiter.api.extension.ExtendWith;",
      "import org.junit.jupiter.api.extension.ExtensionContext;",
      "import org.junit.jupiter.api.extension.ParameterContext;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage example.session;\n\n//tag::user_guide[]\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URI;\nimport java.net.URL;\n\nimport com.sun.net.httpserver.HttpServer;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.jupiter.api.extension.ParameterContext;\nimport org.junit.jupiter.api.extension.ParameterResolver;\n\n@ExtendWith(HttpServerParameterResolver.class)\nclass HttpTests {\n\n\t@Test\n\tvoid respondsWith204(HttpServer server) throws IOException {\n\t\tString host = server.getAddress().getHostString(); // <2>\n\t\tint port = server.getAddress().getPort(); // <3>\n\t\tURL url = URI.create(\"http://\" + host + \":\" + port + \"/test\").toURL();\n\n\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\tconnection.setRequestMethod(\"GET\");\n\t\tint responseCode = connection.getResponseCode(); // <4>\n\n\t\tassertEquals(204, responseCode); // <5>\n\t}\n}\n\nclass HttpServerParameterResolver implements ParameterResolver {\n\t@Override\n\tpublic boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {\n\t\treturn HttpServer.class.equals(parameterContext.getParameter().getType());\n\t}\n\n\t//end::user_guide[]\n\t@SuppressWarnings(\"DataFlowIssue\")\n\t//tag::user_guide[]\n\t@Override\n\tpublic Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) {\n\t\treturn extensionContext\n\t\t\t\t// tag::custom_line_break[]\n\t\t\t\t.getStore(ExtensionContext.Namespace.GLOBAL)\n\t\t\t\t// tag::custom_line_break[]\n\t\t\t\t.get(\"httpServer\", CloseableHt",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/documentation%2Fsrc%2Ftest%2Fjava%2Fexample%2Fsession%2FHttpTests.java",
    "is_test_file": true
  },
  "documentation/src/test/java/example/sharedresources/SharedResourceDemo.java": {
    "status": "modified",
    "patch": "@@ -24,7 +24,7 @@\n \n class SharedResourceDemo {\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t//tag::user_guide[]\n \t@Test\n \tvoid runBothCustomEnginesTest() {",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.junit.jupiter.api.Assertions.assertSame;",
      "import static org.junit.jupiter.api.Assertions.assertTrue;",
      "import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;",
      "import example.FirstCustomEngine;",
      "import example.SecondCustomEngine;",
      "import org.junit.jupiter.api.Test;",
      "import org.junit.platform.launcher.Launcher;",
      "import org.junit.platform.launcher.core.LauncherConfig;",
      "import org.junit.platform.launcher.core.LauncherFactory;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage example.sharedresources;\n\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;\n\nimport example.FirstCustomEngine;\nimport example.SecondCustomEngine;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.platform.launcher.Launcher;\nimport org.junit.platform.launcher.core.LauncherConfig;\nimport org.junit.platform.launcher.core.LauncherFactory;\n\nclass SharedResourceDemo {\n\n\t@SuppressWarnings(\"DataFlowIssue\")\n\t//tag::user_guide[]\n\t@Test\n\tvoid runBothCustomEnginesTest() {\n\t\tFirstCustomEngine firstCustomEngine = new FirstCustomEngine();\n\t\tSecondCustomEngine secondCustomEngine = new SecondCustomEngine();\n\n\t\tLauncher launcher = LauncherFactory.create(LauncherConfig.builder()\n\t\t\t\t// tag::custom_line_break[]\n\t\t\t\t.addTestEngines(firstCustomEngine, secondCustomEngine)\n\t\t\t\t// tag::custom_line_break[]\n\t\t\t\t.enableTestEngineAutoRegistration(false)\n\t\t\t\t// tag::custom_line_break[]\n\t\t\t\t.build());\n\n\t\tlauncher.execute(request().forExecution().build());\n\n\t\tassertSame(firstCustomEngine.socket, secondCustomEngine.socket);\n\t\tassertTrue(firstCustomEngine.socket.isClosed(), \"socket should be closed\");\n\t}\n\t//end::user_guide[]\n}\n",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/documentation%2Fsrc%2Ftest%2Fjava%2Fexample%2Fsharedresources%2FSharedResourceDemo.java",
    "is_test_file": true
  },
  "documentation/src/test/java/example/timing/TimingExtension.java": {
    "status": "modified",
    "patch": "@@ -41,7 +41,7 @@ public void beforeTestExecution(ExtensionContext context) {\n \t}\n \n \t//end::user_guide[]\n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t//tag::user_guide[]\n \t@Override\n \tpublic void afterTestExecution(ExtensionContext context) {",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import java.lang.reflect.Method;",
      "import java.util.logging.Logger;",
      "import org.junit.jupiter.api.extension.AfterTestExecutionCallback;",
      "import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;",
      "import org.junit.jupiter.api.extension.ExtensionContext;",
      "import org.junit.jupiter.api.extension.ExtensionContext.Namespace;",
      "import org.junit.jupiter.api.extension.ExtensionContext.Store;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage example.timing;\n\n// tag::user_guide[]\nimport java.lang.reflect.Method;\nimport java.util.logging.Logger;\n\nimport org.junit.jupiter.api.extension.AfterTestExecutionCallback;\nimport org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.jupiter.api.extension.ExtensionContext.Namespace;\nimport org.junit.jupiter.api.extension.ExtensionContext.Store;\n\n// end::user_guide[]\n/**\n * Simple extension that <em>times</em> the execution of test methods and\n * logs the results at {@code INFO} level.\n *\n * @since 5.0\n */\n// @formatter:off\n// tag::user_guide[]\npublic class TimingExtension implements BeforeTestExecutionCallback, AfterTestExecutionCallback {\n\n\tprivate static final Logger logger = Logger.getLogger(TimingExtension.class.getName());\n\n\tprivate static final String START_TIME = \"start time\";\n\n\t@Override\n\tpublic void beforeTestExecution(ExtensionContext context) {\n\t\tgetStore(context).put(START_TIME, System.currentTimeMillis());\n\t}\n\n\t//end::user_guide[]\n\t@SuppressWarnings(\"DataFlowIssue\")\n\t//tag::user_guide[]\n\t@Override\n\tpublic void afterTestExecution(ExtensionContext context) {\n\t\tMethod testMethod = context.getRequiredTestMethod();\n\t\tlong startTime = getStore(context).remove(START_TIME, long.class);\n\t\tlong duration = System.currentTimeMillis() - startTime;\n\n\t\tlogger.info(() ->\n\t\t\t\"Method [%s] took %s ms.\".formatted(testMethod.getName(), duration));\n\t}\n\n\tprivate Store getStore(ExtensionContext context) {\n\t\treturn context.getStore(Namespace.create(getClass(), context.getRequiredTestMethod()));\n\t}\n\n}\n// end::user_guide[]\n// @formatter:on\n",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/documentation%2Fsrc%2Ftest%2Fjava%2Fexample%2Ftiming%2FTimingExtension.java",
    "is_test_file": true
  },
  "gradle/plugins/common/src/main/kotlin/junitbuild.java-nullability-conventions.gradle.kts": {
    "status": "modified",
    "patch": "@@ -64,6 +64,8 @@ tasks.withType<JavaCompile>().configureEach {\n \t\t\tisJSpecifyMode = true\n \t\t\tcustomContractAnnotations.add(\"org.junit.platform.commons.annotation.Contract\")\n \t\t\tcheckContracts = true\n+\t\t\t// FIXME a new gradle-nullaway-plugin version is needed for a proper DSL\n+\t\t\tcheckOptions.put(\"NullAway:SuppressionNameAliases\", \"DataFlowIssue\")\n \t\t}\n \t}\n }",
    "additions": 2,
    "deletions": 0,
    "changes": 2,
    "language": "kts",
    "imports": [],
    "full_content": "import junitbuild.extensions.dependencyFromLibs\nimport net.ltgt.gradle.errorprone.errorprone\nimport net.ltgt.gradle.nullaway.nullaway\n\nplugins {\n\t`java-library`\n\tid(\"net.ltgt.errorprone\")\n\tid(\"net.ltgt.nullaway\")\n}\n\ndependencies {\n\terrorprone(dependencyFromLibs(\"errorProne-core\"))\n\terrorprone(dependencyFromLibs(\"nullaway\"))\n\tconstraints {\n\t\terrorprone(\"com.google.guava:guava\") {\n\t\t\tversion {\n\t\t\t\trequire(\"33.4.8-jre\")\n\t\t\t}\n\t\t\tbecause(\"Older versions use deprecated methods in sun.misc.Unsafe\")\n\t\t}\n\t}\n}\n\nnullaway {\n\tonlyNullMarked = true\n}\n\ntasks.withType<JavaCompile>().configureEach {\n\toptions.errorprone {\n\t\tval onJ9 = java.toolchain.implementation.orNull == JvmImplementation.J9\n\t\tif (name == \"compileJava\" && !onJ9) {\n\t\t\tdisable(\n\n\t\t\t\t// This check is opinionated wrt. which method names it considers unsuitable for import which includes\n\t\t\t\t// a few of our own methods in `ReflectionUtils` etc.\n\t\t\t\t\"BadImport\",\n\n\t\t\t\t// The findings of this check are subjective because a named constant can be more readable in many cases\n\t\t\t\t\"UnnecessaryLambda\",\n\n\t\t\t\t// Resolving findings for these checks requires ErrorProne's annotations which we don't want to use\n\t\t\t\t\"AnnotateFormatMethod\",\n\t\t\t\t\"DoNotCallSuggester\",\n\t\t\t\t\"InlineMeSuggester\",\n\t\t\t\t\"ImmutableEnumChecker\",\n\n\t\t\t\t// Resolving findings for this check requires using Guava which we don't want to use\n\t\t\t\t\"StringSplitter\",\n\n\t\t\t\t// Produces a lot of findings that we consider to be false positives, for example for package-private\n\t\t\t\t// classes and methods\n\t\t\t\t\"MissingSummary\",\n\t\t\t)\n\t\t\terror(\"PackageLocation\")\n\t\t} else {\n\t\t\tdisableAllChecks = true\n\t\t}\n\t\tnullaway {\n\t\t\tif (onJ9) {\n\t\t\t\tdisable()\n\t\t\t} else {\n\t\t\t\tenable()\n\t\t\t}\n\t\t\tisJSpecifyMode = true\n\t\t\tcustomContractAnnotations.add(\"org.junit.platform.commons.annotation.Contract\")\n\t\t\tcheckContracts = true\n\t\t\t// FIXME a new gradle-nullaway-plugin version is needed for a proper DSL\n\t\t\tcheckOptions.put(\"NullAway:SuppressionNameAliases\", \"DataFlowIssue\")\n\t\t}\n\t}\n}\n\ntasks.withType<JavaCompile",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/gradle%2Fplugins%2Fcommon%2Fsrc%2Fmain%2Fkotlin%2Fjunitbuild.java-nullability-conventions.gradle.kts",
    "is_test_file": false
  },
  "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java": {
    "status": "modified",
    "patch": "@@ -88,7 +88,7 @@ private boolean invokeConditionMethod(Method method, ExtensionContext context) {\n \t\treturn invokeMethod(method, context, testInstance);\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \tprivate static boolean invokeMethod(Method method, ExtensionContext context, @Nullable Object testInstance) {\n \t\tif (method.getParameterCount() == 0) {\n \t\t\treturn (boolean) ReflectionSupport.invokeMethod(method, testInstance);",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.junit.jupiter.api.extension.ConditionEvaluationResult.disabled;",
      "import static org.junit.jupiter.api.extension.ConditionEvaluationResult.enabled;",
      "import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;",
      "import java.lang.annotation.Annotation;",
      "import java.lang.reflect.Method;",
      "import java.util.Optional;",
      "import java.util.function.Function;",
      "import java.util.function.Supplier;",
      "import org.jspecify.annotations.Nullable;",
      "import org.junit.jupiter.api.extension.ConditionEvaluationResult;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.api.condition;\n\nimport static org.junit.jupiter.api.extension.ConditionEvaluationResult.disabled;\nimport static org.junit.jupiter.api.extension.ConditionEvaluationResult.enabled;\nimport static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.Optional;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.extension.ConditionEvaluationResult;\nimport org.junit.jupiter.api.extension.ExecutionCondition;\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.platform.commons.JUnitException;\nimport org.junit.platform.commons.support.ReflectionSupport;\nimport org.junit.platform.commons.util.ClassLoaderUtils;\nimport org.junit.platform.commons.util.Preconditions;\nimport org.junit.platform.commons.util.ReflectionUtils;\nimport org.junit.platform.commons.util.StringUtils;\n\n/**\n * @since 5.7\n */\nabstract class MethodBasedCondition<A extends Annotation> implements ExecutionCondition {\n\n\tprivate final Class<A> annotationType;\n\tprivate final Function<A, String> methodName;\n\tprivate final Function<A, String> customDisabledReason;\n\n\tMethodBasedCondition(Class<A> annotationType, Function<A, String> methodName,\n\t\t\tFunction<A, String> customDisabledReason) {\n\t\tthis.annotationType = annotationType;\n\t\tthis.methodName = methodName;\n\t\tthis.customDisabledReason = customDisabledReason;\n\t}\n\n\t@Override\n\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n\t\tOptional<A> annotation = findAnnotation(context.getEle",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/junit-jupiter-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fapi%2Fcondition%2FMethodBasedCondition.java",
    "is_test_file": false
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/api/AssertAllAssertionsTests.java": {
    "status": "modified",
    "patch": "@@ -37,25 +37,25 @@\n  */\n class AssertAllAssertionsTests {\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid assertAllWithNullExecutableArray() {\n \t\tassertPrecondition(\"executables array must not be null or empty\", () -> assertAll((Executable[]) null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid assertAllWithNullExecutableCollection() {\n \t\tassertPrecondition(\"executables collection must not be null\", () -> assertAll((Collection<Executable>) null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid assertAllWithNullExecutableStream() {\n \t\tassertPrecondition(\"executables stream must not be null\", () -> assertAll((Stream<Executable>) null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid assertAllWithNullInExecutableArray() {\n \t\tassertPrecondition(\"individual executables must not be null\", () -> assertAll((Executable) null));",
    "additions": 4,
    "deletions": 4,
    "changes": 8,
    "language": "java",
    "imports": [
      "import static java.util.Arrays.asList;",
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.junit.jupiter.api.AssertionTestUtils.assertMessageEquals;",
      "import static org.junit.jupiter.api.Assertions.assertAll;",
      "import static org.junit.jupiter.api.Assertions.assertEquals;",
      "import static org.junit.jupiter.api.Assertions.assertFalse;",
      "import static org.junit.jupiter.api.Assertions.assertNotNull;",
      "import static org.junit.jupiter.api.Assertions.assertThrows;",
      "import static org.junit.jupiter.api.Assertions.assertTrue;",
      "import java.io.IOException;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.api;\n\nimport static java.util.Arrays.asList;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.AssertionTestUtils.assertMessageEquals;\nimport static org.junit.jupiter.api.Assertions.assertAll;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.function.Executable;\nimport org.junit.platform.commons.PreconditionViolationException;\nimport org.opentest4j.AssertionFailedError;\nimport org.opentest4j.MultipleFailuresError;\n\n/**\n * Unit tests for JUnit Jupiter {@link Assertions}.\n *\n * @since 5.0\n */\nclass AssertAllAssertionsTests {\n\n\t@SuppressWarnings(\"DataFlowIssue\")\n\t@Test\n\tvoid assertAllWithNullExecutableArray() {\n\t\tassertPrecondition(\"executables array must not be null or empty\", () -> assertAll((Executable[]) null));\n\t}\n\n\t@SuppressWarnings(\"DataFlowIssue\")\n\t@Test\n\tvoid assertAllWithNullExecutableCollection() {\n\t\tassertPrecondition(\"executables collection must not be null\", () -> assertAll((Collection<Executable>) null));\n\t}\n\n\t@SuppressWarnings(\"DataFlowIssue\")\n\t@Test\n\tvoid assertAllWithNullExecutableStream() {\n\t\tassertPrecondition(\"executables stream must not be null\", () -> assertAll((Stream<Executable>) null));\n\t}\n\n\t@SuppressWarnings(\"DataFlowIssue\")\n\t@Test\n\tvoid assertAllWithNullInExecutableArray() {",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fapi%2FAssertAllAssertionsTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/api/AssertLinesMatchAssertionsTests.java": {
    "status": "modified",
    "patch": "@@ -95,7 +95,7 @@ void assertLinesMatchUsingFastForwardMarkerWithLimit3() {\n \t}\n \n \t@Test\n-\t@SuppressWarnings({ \"unchecked\", \"rawtypes\", \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings({ \"unchecked\", \"rawtypes\", \"DataFlowIssue\" })\n \tvoid assertLinesMatchWithNullFails() {\n \t\tassertThrows(PreconditionViolationException.class, () -> assertLinesMatch(null, (List) null));\n \t\tassertThrows(PreconditionViolationException.class, () -> assertLinesMatch(null, Collections.emptyList()));",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.junit.jupiter.api.AssertLinesMatch.isFastForwardLine;",
      "import static org.junit.jupiter.api.AssertLinesMatch.parseFastForwardLimit;",
      "import static org.junit.jupiter.api.AssertionTestUtils.assertMessageEquals;",
      "import static org.junit.jupiter.api.Assertions.assertAll;",
      "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;",
      "import static org.junit.jupiter.api.Assertions.assertEquals;",
      "import static org.junit.jupiter.api.Assertions.assertFalse;",
      "import static org.junit.jupiter.api.Assertions.assertLinesMatch;",
      "import static org.junit.jupiter.api.Assertions.assertThrows;",
      "import static org.junit.jupiter.api.Assertions.assertTrue;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.api;\n\nimport static org.junit.jupiter.api.AssertLinesMatch.isFastForwardLine;\nimport static org.junit.jupiter.api.AssertLinesMatch.parseFastForwardLimit;\nimport static org.junit.jupiter.api.AssertionTestUtils.assertMessageEquals;\nimport static org.junit.jupiter.api.Assertions.assertAll;\nimport static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertLinesMatch;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.function.Supplier;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.platform.commons.PreconditionViolationException;\nimport org.opentest4j.AssertionFailedError;\n\n/**\n * Unit tests for JUnit Jupiter {@link Assertions}.\n *\n * @since 5.0\n */\nclass AssertLinesMatchAssertionsTests {\n\n\t@Test\n\tvoid assertLinesMatchEmptyLists() {\n\t\tassertLinesMatch(Collections.emptyList(), new ArrayList<>());\n\t}\n\n\t@Test\n\tvoid assertLinesMatchSameListInstance() {\n\t\tList<String> list = List.of(\"first line\", \"second line\", \"third line\", \"last line\");\n\t\tassertLinesMatch(list, list);\n\t}\n\n\t@Test\n\tvoid assertLinesMatchPlainEqualLists() {\n\t\tList<String> expected = List.of(\"first line\", \"second line\", \"third line\", \"last line\");\n\t\tList<String> actual = List.of(\"first line\", \"second line\", \"thir",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fapi%2FAssertLinesMatchAssertionsTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/api/DynamicTestTests.java": {
    "status": "modified",
    "patch": "@@ -43,7 +43,7 @@ class DynamicTestTests {\n \n \tprivate final List<@Nullable String> assertedValues = new ArrayList<>();\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid streamFromStreamPreconditions() {\n \t\tThrowingConsumer<Object> testExecutor = input -> {\n@@ -58,7 +58,7 @@ void streamFromStreamPreconditions() {\n \t\t\t() -> DynamicTest.stream(Stream.empty(), displayNameGenerator, null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid streamFromIteratorPreconditions() {\n \t\tThrowingConsumer<Object> testExecutor = input -> {\n@@ -73,7 +73,7 @@ void streamFromIteratorPreconditions() {\n \t\t\t() -> DynamicTest.stream(emptyIterator(), displayNameGenerator, null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid streamFromStreamWithNamesPreconditions() {\n \t\tThrowingConsumer<Object> testExecutor = input -> {\n@@ -84,7 +84,7 @@ void streamFromStreamWithNamesPreconditions() {\n \t\tassertThrows(PreconditionViolationException.class, () -> DynamicTest.stream(Stream.empty(), null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid streamFromIteratorWithNamesPreconditions() {\n \t\tThrowingConsumer<Object> testExecutor = input -> {\n@@ -95,14 +95,14 @@ void streamFromIteratorWithNamesPreconditions() {\n \t\tassertThrows(PreconditionViolationException.class, () -> DynamicTest.stream(emptyIterator(), null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid streamFromStreamWithNamedExecutablesPreconditions() {\n \t\tassertThrows(PreconditionViolationException.class,\n \t\t\t() -> DynamicTest.stream((Stream<DummyNamedExecutableForTests>) null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid streamFromIteratorWithNamedExecutablesPreconditions() {\n \t\tassertThrows(PreconditionViolationException.class,",
    "additions": 6,
    "deletions": 6,
    "changes": 12,
    "language": "java",
    "imports": [
      "import static java.util.Collections.emptyIterator;",
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.junit.jupiter.api.Assertions.assertThrows;",
      "import static org.junit.jupiter.api.DynamicContainer.dynamicContainer;",
      "import static org.junit.jupiter.api.DynamicTest.dynamicTest;",
      "import java.lang.reflect.InvocationTargetException;",
      "import java.lang.reflect.Method;",
      "import java.net.URI;",
      "import java.util.ArrayList;",
      "import java.util.Iterator;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.api;\n\nimport static java.util.Collections.emptyIterator;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.DynamicContainer.dynamicContainer;\nimport static org.junit.jupiter.api.DynamicTest.dynamicTest;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.function.Function;\nimport java.util.stream.Stream;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.function.Executable;\nimport org.junit.jupiter.api.function.ThrowingConsumer;\nimport org.junit.platform.commons.PreconditionViolationException;\nimport org.junit.platform.commons.support.ReflectionSupport;\nimport org.opentest4j.AssertionFailedError;\n\n/**\n * @since 5.0\n */\nclass DynamicTestTests {\n\n\tprivate static final Executable nix = () -> {\n\t};\n\n\tprivate final List<@Nullable String> assertedValues = new ArrayList<>();\n\n\t@SuppressWarnings(\"DataFlowIssue\")\n\t@Test\n\tvoid streamFromStreamPreconditions() {\n\t\tThrowingConsumer<Object> testExecutor = input -> {\n\t\t};\n\t\tFunction<Object, String> displayNameGenerator = Object::toString;\n\n\t\tassertThrows(PreconditionViolationException.class,\n\t\t\t() -> DynamicTest.stream((Stream<?>) null, displayNameGenerator, testExecutor));\n\t\tassertThrows(PreconditionViolationException.class,\n\t\t\t() -> DynamicTest.stream(Stream.empty(), null, testExecutor));\n\t\tassertThrows(PreconditionViolationException.class,\n\t\t\t() -> DynamicTest.stream(Stream.empty(), displayNameGen",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fapi%2FDynamicTestTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/api/FailAssertionsTests.java": {
    "status": "modified",
    "patch": "@@ -74,7 +74,7 @@ void failWithNullString() {\n \t\t}\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid failWithNullMessageSupplier() {\n \t\ttry {",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.junit.jupiter.api.AssertionTestUtils.assertEmptyMessage;",
      "import static org.junit.jupiter.api.AssertionTestUtils.assertMessageContains;",
      "import static org.junit.jupiter.api.AssertionTestUtils.assertMessageEquals;",
      "import static org.junit.jupiter.api.AssertionTestUtils.expectAssertionFailedError;",
      "import static org.junit.jupiter.api.Assertions.assertEquals;",
      "import static org.junit.jupiter.api.Assertions.fail;",
      "import java.util.function.Supplier;",
      "import java.util.stream.Stream;",
      "import org.jspecify.annotations.Nullable;",
      "import org.opentest4j.AssertionFailedError;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.api;\n\nimport static org.junit.jupiter.api.AssertionTestUtils.assertEmptyMessage;\nimport static org.junit.jupiter.api.AssertionTestUtils.assertMessageContains;\nimport static org.junit.jupiter.api.AssertionTestUtils.assertMessageEquals;\nimport static org.junit.jupiter.api.AssertionTestUtils.expectAssertionFailedError;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.fail;\n\nimport java.util.function.Supplier;\nimport java.util.stream.Stream;\n\nimport org.jspecify.annotations.Nullable;\nimport org.opentest4j.AssertionFailedError;\n\n/**\n * Unit tests for JUnit Jupiter {@link Assertions}.\n *\n * @since 5.0\n */\nclass FailAssertionsTests {\n\n\t@Test\n\tvoid failWithoutArgument() {\n\t\ttry {\n\t\t\tfail();\n\t\t\texpectAssertionFailedError();\n\t\t}\n\t\tcatch (AssertionFailedError ex) {\n\t\t\tassertEmptyMessage(ex);\n\t\t}\n\t}\n\n\t@Test\n\tvoid failWithString() {\n\t\ttry {\n\t\t\tfail(\"test\");\n\t\t\texpectAssertionFailedError();\n\t\t}\n\t\tcatch (AssertionFailedError ex) {\n\t\t\tassertMessageEquals(ex, \"test\");\n\t\t}\n\t}\n\n\t@Test\n\tvoid failWithMessageSupplier() {\n\t\ttry {\n\t\t\tfail(() -> \"test\");\n\t\t\texpectAssertionFailedError();\n\t\t}\n\t\tcatch (AssertionFailedError ex) {\n\t\t\tassertMessageEquals(ex, \"test\");\n\t\t}\n\t}\n\n\t@Test\n\tvoid failWithNullString() {\n\t\ttry {\n\t\t\tfail((String) null);\n\t\t\texpectAssertionFailedError();\n\t\t}\n\t\tcatch (AssertionFailedError ex) {\n\t\t\tassertEmptyMessage(ex);\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"DataFlowIssue\")\n\t@Test\n\tvoid failWithNullMessageSupplier() {\n\t\ttry {\n\t\t\tfail((Supplier<@Nullable String>) null);\n\t\t\texpectAssertionFailedError();\n\t\t}\n\t\tcatch (AssertionFailedError ex) {\n\t\t\tassertEmptyMessage(ex);\n\t\t}\n\t}\n\n\t@Test\n\tvoid failWit",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fapi%2FFailAssertionsTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/api/extension/MediaTypeTests.java": {
    "status": "modified",
    "patch": "@@ -45,7 +45,7 @@ void parseWithInvalidMediaType() {\n \t\tassertEquals(\"Invalid media type: 'invalid'\", exception.getMessage());\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid parseWithNullMediaType() {\n \t\tvar exception = assertThrows(PreconditionViolationException.class, () -> MediaType.parse(null));",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.junit.jupiter.api.Assertions.assertEquals;",
      "import static org.junit.jupiter.api.Assertions.assertThrows;",
      "import static org.junit.jupiter.api.EqualsAndHashCodeAssertions.assertEqualsAndHashCode;",
      "import java.nio.charset.StandardCharsets;",
      "import org.junit.jupiter.api.Test;",
      "import org.junit.platform.commons.PreconditionViolationException;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.api.extension;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.EqualsAndHashCodeAssertions.assertEqualsAndHashCode;\n\nimport java.nio.charset.StandardCharsets;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.platform.commons.PreconditionViolationException;\n\nclass MediaTypeTests {\n\n\t@Test\n\tvoid parse() {\n\t\tMediaType mediaType = MediaType.parse(\"text/plain\");\n\t\tassertEquals(\"text/plain\", mediaType.toString());\n\t}\n\n\t@Test\n\tvoid create() {\n\t\tMediaType mediaType = MediaType.create(\"application\", \"json\");\n\t\tassertEquals(\"application/json\", mediaType.toString());\n\t}\n\n\t@Test\n\tvoid createWithCharset() {\n\t\tMediaType mediaType = MediaType.create(\"application\", \"json\", StandardCharsets.UTF_8);\n\t\tassertEquals(\"application/json; charset=UTF-8\", mediaType.toString());\n\t}\n\n\t@Test\n\tvoid parseWithInvalidMediaType() {\n\t\tvar exception = assertThrows(PreconditionViolationException.class, () -> MediaType.parse(\"invalid\"));\n\t\tassertEquals(\"Invalid media type: 'invalid'\", exception.getMessage());\n\t}\n\n\t@SuppressWarnings(\"DataFlowIssue\")\n\t@Test\n\tvoid parseWithNullMediaType() {\n\t\tvar exception = assertThrows(PreconditionViolationException.class, () -> MediaType.parse(null));\n\t\tassertEquals(\"value must not be null\", exception.getMessage());\n\t}\n\n\t@Test\n\tvoid equals() {\n\t\tMediaType mediaType1 = MediaType.TEXT_PLAIN;\n\t\tMediaType mediaType2 = MediaType.parse(\"text/plain\");\n\t\tMediaType mediaType3 = MediaType.parse(\"application/json\");\n\n\t\tassertEqualsAndHashCode(mediaType1, mediaType2, mediaType3);\n\t}\n}\n",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fapi%2Fextension%2FMediaTypeTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/ReportingTests.java": {
    "status": "modified",
    "patch": "@@ -115,7 +115,7 @@ void succeedingTest(TestReporter reporter) {\n \t\t\t\tfile -> Files.writeString(file, \"succeedingTest\"));\n \t\t}\n \n-\t\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t\t@SuppressWarnings(\"DataFlowIssue\")\n \t\t@Test\n \t\tvoid invalidReportData(TestReporter reporter) {\n ",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.junit.jupiter.api.Assertions.assertThrows;",
      "import static org.junit.jupiter.engine.Constants.DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME;",
      "import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;",
      "import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;",
      "import static org.junit.platform.launcher.core.OutputDirectoryProviders.hierarchicalOutputDirectoryProvider;",
      "import static org.junit.platform.testkit.engine.EventConditions.fileEntry;",
      "import static org.junit.platform.testkit.engine.EventConditions.reportEntry;",
      "import java.io.IOException;",
      "import java.io.UncheckedIOException;",
      "import java.nio.file.Files;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.engine;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.engine.Constants.DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME;\nimport static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;\nimport static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;\nimport static org.junit.platform.launcher.core.OutputDirectoryProviders.hierarchicalOutputDirectoryProvider;\nimport static org.junit.platform.testkit.engine.EventConditions.fileEntry;\nimport static org.junit.platform.testkit.engine.EventConditions.reportEntry;\n\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Predicate;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance.Lifecycle;\nimport org.junit.jupiter.api.TestReporter;\nimport org.junit.jupiter.api.extension.MediaType;\nimport org.junit.jupiter.api.io.TempDir;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\nimport org.junit.platform.commons.PreconditionViolationException;\nimport org.junit.platform.engine.reporting.FileEntry;\n\n/**\n * @since 5.0\n */\nclass ReportingTests extends AbstractJupiterTestEngineTests {\n\n\t@ParameterizedTest\n\t@CsvSource(textBlock = \"\"\"\n\t\t\tPER_CLASS,  1, 7, 5\n\t\t\tPER_METHOD, 0, 9, 7\n\t\t\t\"\"\")\n\tvoid reportAndFileEntriesArePublished(Lifecycle lifecycle, int containerEntries, int testReportEntries,\n\t\t\tint testFileEntries, @TempDir Pat",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fengine%2FReportingTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/config/DefaultJupiterConfigurationTests.java": {
    "status": "modified",
    "patch": "@@ -44,7 +44,7 @@ class DefaultJupiterConfigurationTests {\n \n \tprivate static final String KEY = DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME;\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid getDefaultTestInstanceLifecyclePreconditions() {\n \t\tPreconditionViolationException exception = assertThrows(PreconditionViolationException.class,",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.assertj.core.api.Assertions.assertThatThrownBy;",
      "import static org.junit.jupiter.api.Assertions.assertAll;",
      "import static org.junit.jupiter.api.Assertions.assertThrows;",
      "import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;",
      "import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_METHOD;",
      "import static org.junit.jupiter.api.io.CleanupMode.ALWAYS;",
      "import static org.junit.jupiter.engine.Constants.DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME;",
      "import static org.junit.platform.launcher.core.OutputDirectoryProviders.dummyOutputDirectoryProvider;",
      "import static org.mockito.Mockito.mock;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.engine.config;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\nimport static org.junit.jupiter.api.Assertions.assertAll;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\nimport static org.junit.jupiter.api.TestInstance.Lifecycle.PER_METHOD;\nimport static org.junit.jupiter.api.io.CleanupMode.ALWAYS;\nimport static org.junit.jupiter.engine.Constants.DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME;\nimport static org.junit.platform.launcher.core.OutputDirectoryProviders.dummyOutputDirectoryProvider;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.nio.file.Path;\nimport java.util.Optional;\nimport java.util.function.Supplier;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.DisplayNameGenerator;\nimport org.junit.jupiter.api.MethodOrderer;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance.Lifecycle;\nimport org.junit.jupiter.api.extension.AnnotatedElementContext;\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.jupiter.api.io.CleanupMode;\nimport org.junit.jupiter.api.io.TempDirFactory;\nimport org.junit.jupiter.engine.Constants;\nimport org.junit.jupiter.engine.descriptor.CustomDisplayNameGenerator;\nimport org.junit.platform.commons.PreconditionViolationException;\nimport org.junit.platform.engine.ConfigurationParameters;\n\nclass DefaultJupiterConfigurationTests {\n\n\tprivate static final String KEY = DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME;\n\n\t@SuppressWarnings(\"DataFlo",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fengine%2Fconfig%2FDefaultJupiterConfigurationTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/descriptor/DisplayNameUtilsTests.java": {
    "status": "modified",
    "patch": "@@ -218,7 +218,7 @@ class NestedTestCase {\n \n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \tstatic class NullDisplayNameGenerator implements DisplayNameGenerator {\n \n \t\t@Override",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.mockito.Mockito.mock;",
      "import static org.mockito.Mockito.when;",
      "import java.lang.reflect.Method;",
      "import java.util.List;",
      "import java.util.function.Supplier;",
      "import org.junit.jupiter.api.DisplayName;",
      "import org.junit.jupiter.api.DisplayNameGeneration;",
      "import org.junit.jupiter.api.DisplayNameGenerator;",
      "import org.junit.jupiter.api.Nested;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.engine.descriptor;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.reflect.Method;\nimport java.util.List;\nimport java.util.function.Supplier;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.DisplayNameGeneration;\nimport org.junit.jupiter.api.DisplayNameGenerator;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.engine.config.JupiterConfiguration;\n\n/**\n * Unit tests for {@link DisplayNameUtils}.\n *\n * @since 5.5\n */\nclass DisplayNameUtilsTests {\n\n\t@Nested\n\tclass ClassDisplayNameTests {\n\n\t\t@Test\n\t\tvoid shouldGetDisplayNameFromDisplayNameAnnotation() {\n\n\t\t\tString displayName = DisplayNameUtils.determineDisplayName(MyTestCase.class, () -> \"default-name\");\n\n\t\t\tassertThat(displayName).isEqualTo(\"my-test-case\");\n\t\t}\n\n\t\t@Test\n\t\tvoid shouldGetDisplayNameFromSupplierIfDisplayNameAnnotationProvidesBlankString() {\n\n\t\t\tString displayName = DisplayNameUtils.determineDisplayName(BlankDisplayNameTestCase.class,\n\t\t\t\t() -> \"default-name\");\n\n\t\t\tassertThat(displayName).isEqualTo(\"default-name\");\n\t\t}\n\n\t\t@Test\n\t\tvoid shouldGetDisplayNameFromSupplierIfNoDisplayNameAnnotationPresent() {\n\n\t\t\tString displayName = DisplayNameUtils.determineDisplayName(NotDisplayNameTestCase.class,\n\t\t\t\t() -> \"default-name\");\n\n\t\t\tassertThat(displayName).isEqualTo(\"default-name\");\n\t\t}\n\n\t\t@Nested\n\t\tclass ClassDisplayNameSupplierTests {\n\n\t\t\tprivate final JupiterConfiguration configuration = mock();\n\n\t\t\t@Test\n\t\t\tvoid shouldGetDisplayNameFromDisplayNameGenerationAnnotation() {\n\t\t\t\twhen(configuration.getD",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fengine%2Fdescriptor%2FDisplayNameUtilsTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/descriptor/LauncherStoreFacadeTest.java": {
    "status": "modified",
    "patch": "@@ -79,7 +79,7 @@ void returnsNamespaceAwareStore() {\n \t\tassertNotNull(adapter);\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid throwsExceptionWhenNamespaceIsNull() {\n \t\tLauncherStoreFacade facade = new LauncherStoreFacade(requestLevelStore);",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;",
      "import static org.junit.jupiter.api.Assertions.assertEquals;",
      "import static org.junit.jupiter.api.Assertions.assertInstanceOf;",
      "import static org.junit.jupiter.api.Assertions.assertNotNull;",
      "import static org.junit.jupiter.api.Assertions.assertThrows;",
      "import static org.junit.jupiter.api.Assertions.assertThrowsExactly;",
      "import org.junit.jupiter.api.BeforeEach;",
      "import org.junit.jupiter.api.Test;",
      "import org.junit.jupiter.api.extension.ExtensionContext;",
      "import org.junit.jupiter.engine.execution.NamespaceAwareStore;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.engine.descriptor;\n\nimport static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertInstanceOf;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertThrowsExactly;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.jupiter.engine.execution.NamespaceAwareStore;\nimport org.junit.platform.commons.JUnitException;\nimport org.junit.platform.commons.PreconditionViolationException;\nimport org.junit.platform.engine.support.store.Namespace;\nimport org.junit.platform.engine.support.store.NamespacedHierarchicalStore;\n\n/**\n * Tests for {@link LauncherStoreFacade}.\n *\n * @since 5.13\n */\nclass LauncherStoreFacadeTest {\n\n\tprivate NamespacedHierarchicalStore<Namespace> requestLevelStore;\n\tprivate NamespacedHierarchicalStore<Namespace> sessionLevelStore;\n\tprivate ExtensionContext.Namespace extensionNamespace;\n\n\t@BeforeEach\n\tvoid setUp() {\n\t\tsessionLevelStore = new NamespacedHierarchicalStore<>(null);\n\t\trequestLevelStore = new NamespacedHierarchicalStore<>(sessionLevelStore);\n\t\textensionNamespace = ExtensionContext.Namespace.create(\"foo\", \"bar\");\n\t}\n\n\t@Test\n\tvoid createsInstanceSuccessfullyWithValidStore() {\n\t\tassertDoesNotThrow(() -> new LauncherStoreFacade(requestLevelStore));\n\t}\n\n\t@Test\n\tvoid throwsExceptionWhenRequestLevelStoreHasNoParent() {\n\t\tassertThrowsExactly(JUnitException.class, () -> new LauncherStoreFaca",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fengine%2Fdescriptor%2FLauncherStoreFacadeTest.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/descriptor/TestInstanceLifecycleUtilsTests.java": {
    "status": "modified",
    "patch": "@@ -48,7 +48,7 @@ class TestInstanceLifecycleUtilsTests {\n \n \tprivate static final String KEY = DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME;\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid getTestInstanceLifecyclePreconditions() {\n \t\tPreconditionViolationException exception = assertThrows(PreconditionViolationException.class,",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.junit.jupiter.api.Assertions.assertThrows;",
      "import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;",
      "import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_METHOD;",
      "import static org.junit.jupiter.engine.Constants.DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME;",
      "import static org.junit.jupiter.engine.descriptor.TestInstanceLifecycleUtils.getTestInstanceLifecycle;",
      "import static org.junit.platform.launcher.core.OutputDirectoryProviders.dummyOutputDirectoryProvider;",
      "import static org.mockito.Mockito.mock;",
      "import static org.mockito.Mockito.when;",
      "import java.lang.annotation.ElementType;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.engine.descriptor;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\nimport static org.junit.jupiter.api.TestInstance.Lifecycle.PER_METHOD;\nimport static org.junit.jupiter.engine.Constants.DEFAULT_TEST_INSTANCE_LIFECYCLE_PROPERTY_NAME;\nimport static org.junit.jupiter.engine.descriptor.TestInstanceLifecycleUtils.getTestInstanceLifecycle;\nimport static org.junit.platform.launcher.core.OutputDirectoryProviders.dummyOutputDirectoryProvider;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\nimport org.junit.jupiter.api.TestInstance.Lifecycle;\nimport org.junit.jupiter.engine.config.DefaultJupiterConfiguration;\nimport org.junit.platform.commons.PreconditionViolationException;\nimport org.junit.platform.engine.ConfigurationParameters;\n\n/**\n * Unit tests for {@link TestInstanceLifecycleUtils}.\n *\n * <p>NOTE: it doesn't make sense to unit test the JVM system property fallback\n * support in this test class since that feature is a concrete implementation\n * detail of {@code LauncherConfigurationParameters} which necessitates an\n * integration test via the {@code Launcher} API.\n *\n * @since 5.0\n */\nclass TestInstanceLifecycleUtilsTests {\n\n\tprivate static final String KEY = DEFA",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fengine%2Fdescriptor%2FTestInstanceLifecycleUtilsTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/execution/ParameterResolutionUtilsTests.java": {
    "status": "modified",
    "patch": "@@ -149,7 +149,7 @@ void onlyConsiderParameterResolversThatSupportAParticularParameter() {\n \t\tassertThat(arguments).containsExactly(\"something\");\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid passContextInformationToParameterResolverMethods() {\n \t\tanyTestMethodWithAtLeastOneParameter();",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static java.util.Objects.requireNonNull;",
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.assertj.core.api.Assertions.assertThatExceptionOfType;",
      "import static org.junit.jupiter.api.Assertions.assertEquals;",
      "import static org.junit.jupiter.api.Assertions.assertNull;",
      "import static org.junit.jupiter.api.Assertions.assertSame;",
      "import static org.junit.jupiter.api.Assertions.assertThrows;",
      "import static org.mockito.Mockito.mock;",
      "import java.lang.reflect.Constructor;",
      "import java.lang.reflect.Method;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.engine.execution;\n\nimport static java.util.Objects.requireNonNull;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.mock;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\nimport java.math.BigDecimal;\nimport java.util.Optional;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.regex.Pattern;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.jupiter.api.extension.ParameterContext;\nimport org.junit.jupiter.api.extension.ParameterResolutionException;\nimport org.junit.jupiter.api.extension.ParameterResolver;\nimport org.junit.jupiter.engine.config.JupiterConfiguration;\nimport org.junit.jupiter.engine.extension.MutableExtensionRegistry;\nimport org.junit.platform.commons.support.ReflectionSupport;\nimport org.junit.platform.commons.util.ReflectionUtils;\n\n/**\n * Unit tests for {@link ParameterResolutionUtils}.\n *\n * @since 5.9\n */\nclass ParameterResolutionUtilsTests {\n\n\tprivate static final String ENIGMA = \"enigma\";\n\n\tprivate final MethodSource instance = mock();\n\n\tprivate @Nullable Method method;\n\n\tprivate final ExtensionContext extensionContext = mock();\n\n\tprivate final JupiterConfiguration configuration = mock();\n\n\tprivate fina",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fengine%2Fexecution%2FParameterResolutionUtilsTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/CloseablePathTests.java": {
    "status": "modified",
    "patch": "@@ -167,7 +167,7 @@ void factoryReturnsDirectoryOnNonDefaultFileSystemWithPath() throws IOException\n \t\t\tdelete(closeablePath.get());\n \t\t}\n \n-\t\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t\t@SuppressWarnings(\"DataFlowIssue\")\n \t\t@DisplayName(\"fails if the factory returns null\")\n \t\t@ParameterizedTest\n \t\t@ElementTypeSource",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static com.google.common.jimfs.Configuration.unix;",
      "import static java.lang.annotation.ElementType.METHOD;",
      "import static java.lang.annotation.RetentionPolicy.RUNTIME;",
      "import static java.nio.file.Files.createDirectory;",
      "import static java.nio.file.Files.createFile;",
      "import static java.nio.file.Files.createSymbolicLink;",
      "import static java.nio.file.Files.createTempDirectory;",
      "import static java.nio.file.Files.delete;",
      "import static java.nio.file.Files.deleteIfExists;",
      "import static org.assertj.core.api.Assertions.assertThat;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.engine.extension;\n\nimport static com.google.common.jimfs.Configuration.unix;\nimport static java.lang.annotation.ElementType.METHOD;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\nimport static java.nio.file.Files.createDirectory;\nimport static java.nio.file.Files.createFile;\nimport static java.nio.file.Files.createSymbolicLink;\nimport static java.nio.file.Files.createTempDirectory;\nimport static java.nio.file.Files.delete;\nimport static java.nio.file.Files.deleteIfExists;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.junit.jupiter.api.condition.OS.WINDOWS;\nimport static org.junit.jupiter.api.io.CleanupMode.ALWAYS;\nimport static org.junit.jupiter.api.io.CleanupMode.DEFAULT;\nimport static org.junit.jupiter.api.io.CleanupMode.NEVER;\nimport static org.junit.jupiter.api.io.CleanupMode.ON_SUCCESS;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.reset;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Parameter;\nimport java.nio.file.FileSystem;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Optional;\nimport java.util.logging.Level;\nimport java.util.logging.LogRecord;\n",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fengine%2Fextension%2FCloseablePathTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/OrderedMethodTests.java": {
    "status": "modified",
    "patch": "@@ -744,7 +744,7 @@ public void orderMethods(MethodOrdererContext context) {\n \t\t\tcontext.getMethodDescriptors().set(1, createMethodDescriptorImpersonator(method2));\n \t\t}\n \n-\t\t@SuppressWarnings({ \"unchecked\", \"DataFlowIssue\" })\n+\t\t@SuppressWarnings(\"unchecked\")\n \t\tstatic <T> T createMethodDescriptorImpersonator(MethodDescriptor method) {\n \t\t\tMethodDescriptor stub = new MethodDescriptor() {\n \t\t\t\t@Override",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static java.util.Comparator.comparing;",
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.junit.jupiter.api.DynamicTest.dynamicTest;",
      "import static org.junit.jupiter.api.MethodOrderer.Random.RANDOM_SEED_PROPERTY_NAME;",
      "import static org.junit.jupiter.api.Order.DEFAULT;",
      "import static org.junit.jupiter.engine.Constants.DEFAULT_PARALLEL_EXECUTION_MODE;",
      "import static org.junit.jupiter.engine.Constants.DEFAULT_TEST_METHOD_ORDER_PROPERTY_NAME;",
      "import static org.junit.jupiter.engine.Constants.PARALLEL_EXECUTION_ENABLED_PROPERTY_NAME;",
      "import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;",
      "import static org.junit.platform.launcher.LauncherConstants.CRITICAL_DISCOVERY_ISSUE_SEVERITY_PROPERTY_NAME;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.engine.extension;\n\nimport static java.util.Comparator.comparing;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.DynamicTest.dynamicTest;\nimport static org.junit.jupiter.api.MethodOrderer.Random.RANDOM_SEED_PROPERTY_NAME;\nimport static org.junit.jupiter.api.Order.DEFAULT;\nimport static org.junit.jupiter.engine.Constants.DEFAULT_PARALLEL_EXECUTION_MODE;\nimport static org.junit.jupiter.engine.Constants.DEFAULT_TEST_METHOD_ORDER_PROPERTY_NAME;\nimport static org.junit.jupiter.engine.Constants.PARALLEL_EXECUTION_ENABLED_PROPERTY_NAME;\nimport static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;\nimport static org.junit.platform.launcher.LauncherConstants.CRITICAL_DISCOVERY_ISSUE_SEVERITY_PROPERTY_NAME;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.logging.Level;\nimport java.util.logging.LogRecord;\nimport java.util.regex.Pattern;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.DynamicTest;\nimport org.junit.jupiter.api.MethodDescriptor;\nimport org.junit.jupiter.api.MethodOrderer;\nimport org.junit.jupiter.api.MethodOrderer.MethodName;\nimport org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\nimport org.junit.jupiter.api.MethodOrderer.Random;\nimport org.junit.jupiter.api.MethodOrdererContext;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fengine%2Fextension%2FOrderedMethodTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/TempDirectoryTests.java": {
    "status": "modified",
    "patch": "@@ -357,7 +357,7 @@ void doesNotSupportCustomDefaultTempDirFactoryNotReturningDirectory() {\n \n \t\tprivate static class FactoryNotReturningDirectory implements TempDirFactory {\n \n-\t\t\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t\t\t@SuppressWarnings(\"DataFlowIssue\")\n \t\t\t@Override\n \t\t\tpublic Path createTempDirectory(AnnotatedElementContext elementContext, ExtensionContext extensionContext) {\n \t\t\t\treturn null;\n@@ -1475,7 +1475,7 @@ void test(@SuppressWarnings(\"unused\") @TempDir(factory = Factory.class) Path tem\n \t\t\t// never called\n \t\t}\n \n-\t\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t\t@SuppressWarnings(\"DataFlowIssue\")\n \t\tprivate static class Factory implements TempDirFactory {\n \n \t\t\t@Override",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "language": "java",
    "imports": [
      "import static java.lang.annotation.ElementType.ANNOTATION_TYPE;",
      "import static java.lang.annotation.ElementType.FIELD;",
      "import static java.lang.annotation.ElementType.PARAMETER;",
      "import static java.lang.annotation.RetentionPolicy.RUNTIME;",
      "import static java.util.Objects.requireNonNull;",
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.junit.jupiter.api.Assertions.assertAll;",
      "import static org.junit.jupiter.api.Assertions.assertNotEquals;",
      "import static org.junit.jupiter.api.Assertions.assertNotNull;",
      "import static org.junit.jupiter.api.Assertions.assertNotSame;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.engine.extension;\n\nimport static java.lang.annotation.ElementType.ANNOTATION_TYPE;\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.ElementType.PARAMETER;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\nimport static java.util.Objects.requireNonNull;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertAll;\nimport static org.junit.jupiter.api.Assertions.assertNotEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertNotSame;\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.fail;\nimport static org.junit.jupiter.api.Assumptions.assumeTrue;\nimport static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;\nimport static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;\nimport static org.junit.platform.testkit.engine.EventConditions.finishedWithFailure;\nimport static org.junit.platform.testkit.engine.TestExecutionResultConditions.cause;\nimport static org.junit.platform.testkit.engine.TestExecutionResultConditions.instanceOf;\nimport static org.junit.platform.testkit.engine.TestExecutionResultConditions.message;\nimport static org.junit.platform.testkit.engine.TestExecutionResultConditions.suppressed;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Field;\nimport java.la",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fengine%2Fextension%2FTempDirectoryTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/TestInstanceFactoryTests.java": {
    "status": "modified",
    "patch": "@@ -775,7 +775,7 @@ private static class LegacyInstanceFactory extends AbstractTestInstanceFactory {\n \t */\n \tprivate static class NullTestInstanceFactory implements TestInstanceFactory {\n \n-\t\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t\t@SuppressWarnings(\"DataFlowIssue\")\n \t\t@Override\n \t\tpublic Object createTestInstance(TestInstanceFactoryContext factoryContext, ExtensionContext extensionContext) {\n \t\t\treturn null;",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.junit.jupiter.api.Assertions.assertEquals;",
      "import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;",
      "import static org.junit.jupiter.api.extension.TestInstantiationAwareExtension.ExtensionContextScope.TEST_METHOD;",
      "import static org.junit.platform.commons.util.ClassUtils.nullSafeToString;",
      "import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;",
      "import static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;",
      "import static org.junit.platform.testkit.engine.EventConditions.container;",
      "import static org.junit.platform.testkit.engine.EventConditions.engine;",
      "import static org.junit.platform.testkit.engine.EventConditions.event;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.engine.extension;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\nimport static org.junit.jupiter.api.extension.TestInstantiationAwareExtension.ExtensionContextScope.TEST_METHOD;\nimport static org.junit.platform.commons.util.ClassUtils.nullSafeToString;\nimport static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;\nimport static org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder.request;\nimport static org.junit.platform.testkit.engine.EventConditions.container;\nimport static org.junit.platform.testkit.engine.EventConditions.engine;\nimport static org.junit.platform.testkit.engine.EventConditions.event;\nimport static org.junit.platform.testkit.engine.EventConditions.finishedSuccessfully;\nimport static org.junit.platform.testkit.engine.EventConditions.finishedWithFailure;\nimport static org.junit.platform.testkit.engine.EventConditions.nestedContainer;\nimport static org.junit.platform.testkit.engine.EventConditions.started;\nimport static org.junit.platform.testkit.engine.EventConditions.test;\nimport static org.junit.platform.testkit.engine.TestExecutionResultConditions.instanceOf;\nimport static org.junit.platform.testkit.engine.TestExecutionResultConditions.message;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport o",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fengine%2Fextension%2FTestInstanceFactoryTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/TestReporterParameterResolverTests.java": {
    "status": "modified",
    "patch": "@@ -31,7 +31,7 @@ class TestReporterParameterResolverTests {\n \n \tTestReporterParameterResolver resolver = new TestReporterParameterResolver();\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid supports() {\n \t\tParameter parameter1 = findParameterOfMethod(\"methodWithTestReporterParameter\", TestReporter.class);",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.junit.jupiter.api.Assertions.assertFalse;",
      "import static org.junit.jupiter.api.Assertions.assertNotNull;",
      "import static org.junit.jupiter.api.Assertions.assertTrue;",
      "import static org.mockito.Mockito.mock;",
      "import static org.mockito.Mockito.when;",
      "import java.lang.reflect.Method;",
      "import java.lang.reflect.Parameter;",
      "import org.junit.jupiter.api.Test;",
      "import org.junit.jupiter.api.TestReporter;",
      "import org.junit.jupiter.api.extension.ParameterContext;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.engine.extension;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Parameter;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestReporter;\nimport org.junit.jupiter.api.extension.ParameterContext;\nimport org.junit.platform.commons.support.ReflectionSupport;\n\n/**\n * @since 5.0\n */\nclass TestReporterParameterResolverTests {\n\n\tTestReporterParameterResolver resolver = new TestReporterParameterResolver();\n\n\t@SuppressWarnings(\"DataFlowIssue\")\n\t@Test\n\tvoid supports() {\n\t\tParameter parameter1 = findParameterOfMethod(\"methodWithTestReporterParameter\", TestReporter.class);\n\t\tassertTrue(this.resolver.supportsParameter(parameterContext(parameter1), null));\n\n\t\tParameter parameter2 = findParameterOfMethod(\"methodWithoutTestReporterParameter\", String.class);\n\t\tassertFalse(this.resolver.supportsParameter(parameterContext(parameter2), null));\n\t}\n\n\t@Test\n\tvoid resolve() {\n\t\tParameter parameter = findParameterOfMethod(\"methodWithTestReporterParameter\", TestReporter.class);\n\n\t\tTestReporter testReporter = this.resolver.resolveParameter(parameterContext(parameter), mock());\n\t\tassertNotNull(testReporter);\n\t}\n\n\tprivate Parameter findParameterOfMethod(String methodName, Class<?>... parameterTypes) {\n\t\tMethod method = ReflectionSupport.findMethod(Sample.class, methodName, parameterTypes).orElseThrow();\n\t\treturn method.getParameters()[0];\n\t}\n\n\tprivate static ParameterContext",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fengine%2Fextension%2FTestReporterParameterResolverTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/TimeoutExceptionFactoryTests.java": {
    "status": "modified",
    "patch": "@@ -51,7 +51,7 @@ void createExceptionWithMethodSignatureTimeoutAndThrowable() {\n \t\t\t\t.hasSuppressedException(suppressedException);\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\", \"ThrowableNotThrown\" })\n+\t@SuppressWarnings({ \"DataFlowIssue\", \"ThrowableNotThrown\" })\n \t@Nested\n \t@DisplayName(\"throws exception when\")\n \tclass ThrowException {",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static java.util.concurrent.TimeUnit.MILLISECONDS;",
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.assertj.core.api.Assertions.assertThatThrownBy;",
      "import static org.junit.jupiter.engine.extension.TimeoutExceptionFactory.create;",
      "import java.util.concurrent.TimeoutException;",
      "import org.junit.jupiter.api.DisplayName;",
      "import org.junit.jupiter.api.Nested;",
      "import org.junit.jupiter.api.Test;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.engine.extension;\n\nimport static java.util.concurrent.TimeUnit.MILLISECONDS;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\nimport static org.junit.jupiter.engine.extension.TimeoutExceptionFactory.create;\n\nimport java.util.concurrent.TimeoutException;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\n/**\n * @since 5.9\n */\n@DisplayName(\"TimeoutExceptionFactory\")\nclass TimeoutExceptionFactoryTests {\n\n\tprivate static final TimeoutDuration tenMillisDuration = new TimeoutDuration(10, MILLISECONDS);\n\tprivate static final Exception suppressedException = new Exception(\"Winke!\");\n\tprivate static final String methodSignature = \"test()\";\n\n\t@Test\n\t@DisplayName(\"creates exception with method signature and timeout\")\n\tvoid createExceptionWithMethodSignatureTimeout() {\n\t\tTimeoutException exception = create(methodSignature, tenMillisDuration);\n\n\t\tassertThat(exception) //\n\t\t\t\t.hasMessage(\"test() timed out after 10 milliseconds\") //\n\t\t\t\t.hasNoSuppressedExceptions();\n\t}\n\n\t@Test\n\t@DisplayName(\"creates exception with method signature, timeout and throwable\")\n\tvoid createExceptionWithMethodSignatureTimeoutAndThrowable() {\n\t\tTimeoutException exception = create(methodSignature, tenMillisDuration, suppressedException);\n\n\t\tassertThat(exception) //\n\t\t\t\t.hasMessage(\"test() timed out after 10 milliseconds\") //\n\t\t\t\t.hasSuppressedException(suppressedException);\n\t}\n\n\t@SuppressWarnings({ \"DataFlowIssue\", \"ThrowableNotThrown\" })\n\t@Nested\n\t@DisplayName(\"throws exception when\")\n\tclass ThrowException {\n\n\t\t@Test\n\t\t@DisplayName(\"m",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fengine%2Fextension%2FTimeoutExceptionFactoryTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/engine/extension/TimeoutInvocationFactoryTests.java": {
    "status": "modified",
    "patch": "@@ -61,23 +61,23 @@ void setUp() {\n \t\ttimeoutInvocationFactory = new TimeoutInvocationFactory(store);\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \t@DisplayName(\"throws exception when null store is provided on create\")\n \tvoid shouldThrowExceptionWhenInstantiatingWithNullStore() {\n \t\tassertThatThrownBy(() -> new TimeoutInvocationFactory(null)) //\n \t\t\t\t.hasMessage(\"store must not be null\");\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \t@DisplayName(\"throws exception when null timeout thread mode is provided on create\")\n \tvoid shouldThrowExceptionWhenNullTimeoutThreadModeIsProvidedWhenCreate() {\n \t\tassertThatThrownBy(() -> timeoutInvocationFactory.create(null, parameters)) //\n \t\t\t\t.hasMessage(\"thread mode must not be null\");\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \t@DisplayName(\"throws exception when null timeout invocation parameters is provided on create\")\n \tvoid shouldThrowExceptionWhenNullTimeoutInvocationParametersIsProvidedWhenCreate() {",
    "additions": 3,
    "deletions": 3,
    "changes": 6,
    "language": "java",
    "imports": [
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.assertj.core.api.Assertions.assertThatThrownBy;",
      "import static org.mockito.Mockito.verify;",
      "import org.junit.jupiter.api.BeforeEach;",
      "import org.junit.jupiter.api.DisplayName;",
      "import org.junit.jupiter.api.Test;",
      "import org.junit.jupiter.api.Timeout.ThreadMode;",
      "import org.junit.jupiter.api.extension.DisabledInEclipse;",
      "import org.junit.jupiter.api.extension.ExtendWith;",
      "import org.junit.jupiter.api.extension.ExtensionContext.Store;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.engine.extension;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\nimport static org.mockito.Mockito.verify;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Timeout.ThreadMode;\nimport org.junit.jupiter.api.extension.DisabledInEclipse;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.junit.jupiter.api.extension.ExtensionContext.Store;\nimport org.junit.jupiter.api.extension.InvocationInterceptor.Invocation;\nimport org.junit.jupiter.engine.execution.NamespaceAwareStore;\nimport org.junit.jupiter.engine.extension.TimeoutInvocationFactory.SingleThreadExecutorResource;\nimport org.junit.jupiter.engine.extension.TimeoutInvocationFactory.TimeoutInvocationParameters;\nimport org.junit.platform.engine.support.store.Namespace;\nimport org.junit.platform.engine.support.store.NamespacedHierarchicalStore;\nimport org.mockito.Mock;\nimport org.mockito.Spy;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\n// org.mockito.exceptions.base.MockitoException: Unable to initialize @Spy annotated field 'store'.\n// Mockito cannot mock this class: class org.junit.jupiter.engine.execution.NamespaceAwareStore.\n// You are seeing this disclaimer because Mockito is configured to create inlined mocks.\n// Byte Buddy could not instrument all classes within the mock's type hierarchy.\n@DisabledInEclipse(\"Mockito cannot create a spy for NamespaceAwareStore using the inline MockMaker in Eclipse IDE\")\n@DisplayName(\"TimeoutInvocationFactory\")\n@ExtendWith(MockitoExtension.class)\nclass Time",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fengine%2Fextension%2FTimeoutInvocationFactoryTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/params/aggregator/DefaultArgumentsAccessorTests.java": {
    "status": "modified",
    "patch": "@@ -30,7 +30,7 @@\n  */\n class DefaultArgumentsAccessorTests {\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid argumentsMustNotBeNull() {\n \t\tassertThrows(PreconditionViolationException.class, () -> defaultArgumentsAccessor(1, (Object[]) null));",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.junit.jupiter.api.Assertions.assertArrayEquals;",
      "import static org.junit.jupiter.api.Assertions.assertEquals;",
      "import static org.junit.jupiter.api.Assertions.assertIterableEquals;",
      "import static org.junit.jupiter.api.Assertions.assertNull;",
      "import static org.junit.jupiter.api.Assertions.assertThrows;",
      "import java.util.Arrays;",
      "import org.jspecify.annotations.Nullable;",
      "import org.junit.jupiter.api.Test;",
      "import org.junit.platform.commons.PreconditionViolationException;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.params.aggregator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertIterableEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.util.Arrays;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Test;\nimport org.junit.platform.commons.PreconditionViolationException;\n\n/**\n * Unit tests for {@link DefaultArgumentsAccessor}.\n *\n * @since 5.2\n */\nclass DefaultArgumentsAccessorTests {\n\n\t@SuppressWarnings(\"DataFlowIssue\")\n\t@Test\n\tvoid argumentsMustNotBeNull() {\n\t\tassertThrows(PreconditionViolationException.class, () -> defaultArgumentsAccessor(1, (Object[]) null));\n\t}\n\n\t@Test\n\tvoid indexMustNotBeNegative() {\n\t\tArgumentsAccessor arguments = defaultArgumentsAccessor(1, 1, 2);\n\t\tException exception = assertThrows(PreconditionViolationException.class, () -> arguments.get(-1));\n\t\tassertThat(exception.getMessage()).containsSubsequence(\"index must be\", \">= 0\");\n\t}\n\n\t@Test\n\tvoid indexMustBeSmallerThanLength() {\n\t\tArgumentsAccessor arguments = defaultArgumentsAccessor(1, 1, 2);\n\t\tException exception = assertThrows(PreconditionViolationException.class, () -> arguments.get(2));\n\t\tassertThat(exception.getMessage()).containsSubsequence(\"index must be\", \"< 2\");\n\t}\n\n\t@Test\n\tvoid getNull() {\n\t\tassertNull(defaultArgumentsAccessor(1, new @Nullable Object[] { null }).get(0));\n\t}\n\n\t@Test\n\tvoid getWithNullCastToWrapperType() {\n\t\tassertNull(defaultArgumentsAccessor(1,",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fparams%2Faggregator%2FDefaultArgumentsAccessorTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/params/converter/TypedArgumentConverterTests.java": {
    "status": "modified",
    "patch": "@@ -48,7 +48,7 @@ class UnitTests {\n \t\t/**\n \t\t * @since 5.8\n \t\t */\n-\t\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t\t@SuppressWarnings(\"DataFlowIssue\")\n \t\t@Test\n \t\tvoid preconditions() {\n \t\t\tassertThatExceptionOfType(PreconditionViolationException.class)//",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.assertj.core.api.Assertions.assertThatExceptionOfType;",
      "import static org.junit.jupiter.api.Assertions.assertAll;",
      "import static org.mockito.Mockito.mock;",
      "import static org.mockito.Mockito.when;",
      "import java.lang.annotation.ElementType;",
      "import java.lang.annotation.Retention;",
      "import java.lang.annotation.RetentionPolicy;",
      "import java.lang.annotation.Target;",
      "import java.lang.reflect.Method;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.params.converter;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.junit.jupiter.api.Assertions.assertAll;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Parameter;\n\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ParameterContext;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.NullSource;\nimport org.junit.jupiter.params.provider.ValueSource;\nimport org.junit.platform.commons.PreconditionViolationException;\nimport org.junit.platform.commons.support.ReflectionSupport;\n\n/**\n * Tests for {@link TypedArgumentConverter}.\n *\n * @since 5.7\n */\nclass TypedArgumentConverterTests {\n\n\t@Nested\n\tclass UnitTests {\n\n\t\tprivate final StringLengthArgumentConverter converter = new StringLengthArgumentConverter();\n\n\t\t/**\n\t\t * @since 5.8\n\t\t */\n\t\t@SuppressWarnings(\"DataFlowIssue\")\n\t\t@Test\n\t\tvoid preconditions() {\n\t\t\tassertThatExceptionOfType(PreconditionViolationException.class)//\n\t\t\t\t\t.isThrownBy(() -> new StringLengthArgumentConverter(null, Integer.class))//\n\t\t\t\t\t.withMessage(\"sourceType must not be null\");\n\n\t\t\tassertThatExceptionOfType(PreconditionViolationException.class)//\n\t\t\t\t\t.isThrownBy(() -> new StringLengthArgumentConverter(String.class, null))//\n\t\t",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fparams%2Fconverter%2FTypedArgumentConverterTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/params/provider/AnnotationBasedArgumentsProviderTests.java": {
    "status": "modified",
    "patch": "@@ -38,7 +38,7 @@ protected Stream<? extends Arguments> provideArguments(\n \t\t}\n \t};\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \t@DisplayName(\"should throw exception when null annotation is provided to accept method\")\n \tvoid shouldThrowExceptionWhenNullAnnotationIsProvidedToAccept() {",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.assertj.core.api.Assertions.assertThatThrownBy;",
      "import static org.junit.jupiter.params.provider.MockCsvAnnotationBuilder.csvSource;",
      "import static org.mockito.ArgumentMatchers.eq;",
      "import static org.mockito.Mockito.atMostOnce;",
      "import static org.mockito.Mockito.mock;",
      "import static org.mockito.Mockito.spy;",
      "import static org.mockito.Mockito.verify;",
      "import java.util.stream.Stream;",
      "import org.junit.jupiter.api.DisplayName;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.params.provider;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\nimport static org.junit.jupiter.params.provider.MockCsvAnnotationBuilder.csvSource;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.atMostOnce;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.verify;\n\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.jupiter.params.support.ParameterDeclarations;\n\n@DisplayName(\"AnnotationBasedArgumentsProvider\")\nclass AnnotationBasedArgumentsProviderTests {\n\n\tprivate final AnnotationBasedArgumentsProvider<CsvSource> annotationBasedArgumentsProvider = new AnnotationBasedArgumentsProvider<>() {\n\t\t@Override\n\t\tprotected Stream<? extends Arguments> provideArguments(\n\t\t\t\torg.junit.jupiter.params.support.ParameterDeclarations parameters, ExtensionContext context,\n\t\t\t\tCsvSource annotation) {\n\t\t\treturn Stream.of(Arguments.of(annotation));\n\t\t}\n\t};\n\n\t@SuppressWarnings(\"DataFlowIssue\")\n\t@Test\n\t@DisplayName(\"should throw exception when null annotation is provided to accept method\")\n\tvoid shouldThrowExceptionWhenNullAnnotationIsProvidedToAccept() {\n\t\tassertThatThrownBy(() -> annotationBasedArgumentsProvider.accept(null)) //\n\t\t\t\t.hasMessage(\"annotation must not be null\");\n\t}\n\n\t@Test\n\t@DisplayName(\"should invoke the provideArguments template method with the accepted annotation\")\n\tvoid shouldInvokeTemplateMethodWithTheAnnotationProvidedToAccept() {\n",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fparams%2Fprovider%2FAnnotationBasedArgumentsProviderTests.java",
    "is_test_file": true
  },
  "jupiter-tests/src/test/java/org/junit/jupiter/params/provider/MethodArgumentsProviderTests.java": {
    "status": "modified",
    "patch": "@@ -773,7 +773,7 @@ private static Object[] array(Object... objects) {\n \t\treturn provider.provideArguments(mock(), extensionContext).map(Arguments::get);\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \tprivate DefaultExecutableInvoker getExecutableInvoker(ExtensionContext extensionContext) {\n \t\treturn new DefaultExecutableInvoker(extensionContext, extensionRegistry);\n \t}",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.junit.jupiter.api.Assertions.assertThrows;",
      "import static org.junit.jupiter.engine.extension.MutableExtensionRegistry.createRegistryWithDefaultExtensions;",
      "import static org.junit.platform.commons.util.ReflectionUtils.findMethod;",
      "import static org.mockito.Mockito.doCallRealMethod;",
      "import static org.mockito.Mockito.mock;",
      "import static org.mockito.Mockito.when;",
      "import java.lang.reflect.Method;",
      "import java.util.Arrays;",
      "import java.util.Iterator;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.jupiter.params.provider;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.engine.extension.MutableExtensionRegistry.createRegistryWithDefaultExtensions;\nimport static org.junit.platform.commons.util.ReflectionUtils.findMethod;\nimport static org.mockito.Mockito.doCallRealMethod;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\nimport java.util.stream.DoubleStream;\nimport java.util.stream.IntStream;\nimport java.util.stream.LongStream;\nimport java.util.stream.Stream;\n\nimport org.jspecify.annotations.NullUnmarked;\nimport org.jspecify.annotations.Nullable;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance.Lifecycle;\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.jupiter.api.extension.ParameterContext;\nimport org.junit.jupiter.api.extension.ParameterResolver;\nimport org.junit.jupiter.engine.execution.DefaultExecutableInvoker;\nimport org.junit.jupiter.engine.extension.MutableExtensionRegistry;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.platform.commons.JUnitException;\nimport org.junit.platform.commons.PreconditionViolationException;\nimport org.junit.platform.commons.test.TestClassLoader;\nimport org.junit.platform.commons.util.ReflectionUtils;\n\n/**\n * @since 5.0\n */\nclass MethodArgumentsProvid",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/jupiter-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fjupiter%2Fparams%2Fprovider%2FMethodArgumentsProviderTests.java",
    "is_test_file": true
  },
  "platform-tests/src/test/java/org/junit/platform/commons/function/TryTests.java": {
    "status": "modified",
    "patch": "@@ -72,7 +72,7 @@ void failedTriesCanBeTransformed() throws Exception {\n \t\tassertThat(exception.get()).isSameAs(cause);\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid successfulTriesCanStoreNull() throws Exception {\n \t\tvar success = Try.success(null);\n@@ -101,7 +101,7 @@ void triesWithSameContentAreEqual() {\n \t\tassertThat(failure).isEqualTo(Try.failure(cause));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid methodPreconditionsAreChecked() {\n \t\tassertThrows(JUnitException.class, () -> Try.call(null));",
    "additions": 2,
    "deletions": 2,
    "changes": 4,
    "language": "java",
    "imports": [
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.junit.jupiter.api.Assertions.assertThrows;",
      "import static org.junit.jupiter.api.Assertions.fail;",
      "import java.util.concurrent.Callable;",
      "import java.util.concurrent.atomic.AtomicReference;",
      "import org.junit.jupiter.api.Test;",
      "import org.junit.platform.commons.JUnitException;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.platform.commons.function;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.fail;\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.platform.commons.JUnitException;\n\npublic class TryTests {\n\n\t@Test\n\tvoid successfulTriesCanBeTransformed() throws Exception {\n\t\tvar success = Try.success(\"foo\");\n\n\t\tassertThat(success.get()).isEqualTo(\"foo\");\n\t\tassertThat(success.getNonNull()).isEqualTo(\"foo\");\n\t\tassertThat(success.getOrThrow(RuntimeException::new)).isEqualTo(\"foo\");\n\t\tassertThat(success.getNonNullOrThrow(RuntimeException::new)).isEqualTo(\"foo\");\n\t\tassertThat(success.toOptional()).contains(\"foo\");\n\n\t\tassertThat(success.andThen(v -> {\n\t\t\tassertThat(v).isEqualTo(\"foo\");\n\t\t\treturn Try.success(\"bar\");\n\t\t}).get()).isEqualTo(\"bar\");\n\t\tassertThat(success.andThenTry(v -> {\n\t\t\tassertThat(v).isEqualTo(\"foo\");\n\t\t\treturn \"bar\";\n\t\t}).get()).isEqualTo(\"bar\");\n\n\t\tassertThat(success.orElse(() -> fail(\"should not be called\"))).isSameAs(success);\n\t\tassertThat(success.orElseTry(() -> fail(\"should not be called\"))).isSameAs(success);\n\n\t\tvar value = new AtomicReference<String>();\n\t\tassertThat(success.ifSuccess(value::set)).isSameAs(success);\n\t\tassertThat(value.get()).isEqualTo(\"foo\");\n\t\tassertThat(success.ifFailure(cause -> fail(\"should not be called\"))).isSameAs(success);\n\t}\n\n\t@Test\n\tvoid failedTriesCanBeTransformed() throws Exception {\n\t\tvar cause = new JUnitException(\"foo\");\n\t\tvar failure = Try.failure(cause);\n\n\t\tassertThat(assertThrows(JUnitException.cl",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/platform-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fplatform%2Fcommons%2Ffunction%2FTryTests.java",
    "is_test_file": true
  },
  "platform-tests/src/test/java/org/junit/platform/commons/support/AnnotationSupportTests.java": {
    "status": "modified",
    "patch": "@@ -35,7 +35,7 @@\n  */\n class AnnotationSupportTests {\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid isAnnotatedPreconditions() {\n \t\tvar optional = Optional.of(Probe.class);\n@@ -59,7 +59,7 @@ void isAnnotatedDelegates() {\n \t\t\tAnnotationSupport.isAnnotated(element, Override.class));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid findAnnotationOnElementPreconditions() {\n \t\tvar optional = Optional.of(Probe.class);\n@@ -84,7 +84,7 @@ void findAnnotationOnElementDelegates() {\n \t\t\tAnnotationSupport.findAnnotation(element, Override.class));\n \t}\n \n-\t@SuppressWarnings({ \"deprecation\", \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings({ \"deprecation\", \"DataFlowIssue\" })\n \t@Test\n \tvoid findAnnotationOnClassWithSearchModePreconditions() {\n \t\tassertPreconditionViolationException(\"annotationType\",\n@@ -93,7 +93,7 @@ void findAnnotationOnClassWithSearchModePreconditions() {\n \t\t\t() -> AnnotationSupport.findAnnotation(Probe.class, Override.class, (SearchOption) null));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid findAnnotationOnClassWithEnclosingInstanceTypesPreconditions() {\n \t\tassertPreconditionViolationException(\"enclosingInstanceTypes\",\n@@ -135,7 +135,7 @@ void findAnnotationOnClassWithEnclosingInstanceTypes() {\n \t\t\t\t.contains(Probe.class.getDeclaredAnnotation(Tag.class));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid findPublicAnnotatedFieldsPreconditions() {\n \t\tassertPreconditionViolationException(\"Class\",\n@@ -154,7 +154,7 @@ void findPublicAnnotatedFieldsDelegates() {\n \t\t\tAnnotationSupport.findPublicAnnotatedFields(Probe.class, Throwable.class, Override.class));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid findAnnotatedMethodsPreconditions() {\n \t\tassertPreconditionViolationException(\"Class\",\n@@ -199,7 +199,7 @@ void findRepeatableAnnotationsDelegates() throws Throwable {\n \t\tassertEquals(expected.toString(), actual.toString(), \"expected equal exception toString representation\");\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid findRepeatableAnnotationsPreconditions() {\n \t\tassertPreconditionViolationException(\"annotationType\",\n@@ -225,7 +225,7 @@ void findAnnotatedFieldsDelegates() {\n \t\t\t\tHierarchyTraversalMode.TOP_DOWN));\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid findAnnotatedFieldsPreconditions() {\n \t\tassertPreconditionViolationException(\"Class\",\n@@ -277,7 +277,7 @@ void findAnnotatedFieldValuesForStaticFieldsByType() {\n \t\t\t\t.containsExactlyInAnyOrder(\"s1\", \"s2\");\n \t}\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid findAnnotatedFieldValuesPreconditions() {\n \t\tassertPreconditionViolationException(\"instance\",",
    "additions": 9,
    "deletions": 9,
    "changes": 18,
    "language": "java",
    "imports": [
      "import static org.assertj.core.api.Assertions.assertThat;",
      "import static org.junit.jupiter.api.Assertions.assertEquals;",
      "import static org.junit.jupiter.api.Assertions.assertSame;",
      "import static org.junit.jupiter.api.Assertions.assertThrows;",
      "import static org.junit.platform.commons.support.PreconditionAssertions.assertPreconditionViolationException;",
      "import java.lang.annotation.ElementType;",
      "import java.lang.annotation.Retention;",
      "import java.lang.annotation.RetentionPolicy;",
      "import java.lang.annotation.Target;",
      "import java.util.List;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.platform.commons.support;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.platform.commons.support.PreconditionAssertions.assertPreconditionViolationException;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.jspecify.annotations.NullUnmarked;\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\nimport org.junit.platform.commons.PreconditionViolationException;\nimport org.junit.platform.commons.util.AnnotationUtils;\nimport org.junit.platform.commons.util.ReflectionUtils;\n\n/**\n * @since 1.0\n */\nclass AnnotationSupportTests {\n\n\t@SuppressWarnings(\"DataFlowIssue\")\n\t@Test\n\tvoid isAnnotatedPreconditions() {\n\t\tvar optional = Optional.of(Probe.class);\n\t\tassertPreconditionViolationException(\"annotationType\", () -> AnnotationSupport.isAnnotated(optional, null));\n\t\tassertPreconditionViolationException(\"annotationType\", () -> AnnotationSupport.isAnnotated(Probe.class, null));\n\t}\n\n\t@Test\n\tvoid isAnnotatedDelegates() {\n\t\tvar element = Probe.class;\n\t\tvar optional = Optional.of(element);\n\n\t\tassertEquals(AnnotationUtils.isAnnotated(optional, Tag.class),\n\t\t\tAnnotationSupport.isAnnotated(optional, Tag.class));\n\t\tassertEquals(AnnotationUtils.isAnnotated(optional, Override.class),\n\t\t\tAnnotationSupport.isAnnotated(optional, Override.class));\n\n\t\tassertEquals(Annot",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/platform-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fplatform%2Fcommons%2Fsupport%2FAnnotationSupportTests.java",
    "is_test_file": true
  },
  "platform-tests/src/test/java/org/junit/platform/commons/support/ClassSupportTests.java": {
    "status": "modified",
    "patch": "@@ -24,7 +24,7 @@\n  */\n class ClassSupportTests {\n \n-\t@SuppressWarnings({ \"DataFlowIssue\", \"NullAway\" })\n+\t@SuppressWarnings(\"DataFlowIssue\")\n \t@Test\n \tvoid nullSafeToStringPreconditions() {\n \t\tFunction<? super Class<?>, ? extends String> mapper = null;",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "language": "java",
    "imports": [
      "import static org.junit.jupiter.api.Assertions.assertEquals;",
      "import static org.junit.platform.commons.support.PreconditionAssertions.assertPreconditionViolationException;",
      "import java.util.List;",
      "import java.util.function.Function;",
      "import org.junit.jupiter.api.Test;",
      "import org.junit.platform.commons.util.ClassUtils;"
    ],
    "full_content": "/*\n * Copyright 2015-2025 the original author or authors.\n *\n * All rights reserved. This program and the accompanying materials are\n * made available under the terms of the Eclipse Public License v2.0 which\n * accompanies this distribution and is available at\n *\n * https://www.eclipse.org/legal/epl-v20.html\n */\n\npackage org.junit.platform.commons.support;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.platform.commons.support.PreconditionAssertions.assertPreconditionViolationException;\n\nimport java.util.List;\nimport java.util.function.Function;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.platform.commons.util.ClassUtils;\n\n/**\n * @since 1.1\n */\nclass ClassSupportTests {\n\n\t@SuppressWarnings(\"DataFlowIssue\")\n\t@Test\n\tvoid nullSafeToStringPreconditions() {\n\t\tFunction<? super Class<?>, ? extends String> mapper = null;\n\t\tassertPreconditionViolationException(\"Mapping function\",\n\t\t\t() -> ClassSupport.nullSafeToString(mapper, String.class, List.class));\n\t}\n\n\t@Test\n\tvoid nullSafeToStringDelegates() {\n\t\tassertEquals(ClassUtils.nullSafeToString(String.class, List.class),\n\t\t\tClassSupport.nullSafeToString(String.class, List.class));\n\n\t\tFunction<Class<?>, String> classToStringMapper = aClass -> aClass.getSimpleName() + \"-Test\";\n\t\tassertEquals(ClassUtils.nullSafeToString(classToStringMapper, String.class, List.class),\n\t\t\tClassSupport.nullSafeToString(classToStringMapper, String.class, List.class));\n\t}\n}\n",
    "raw_url": "https://github.com/junit-team/junit-framework/raw/8b133fde327989008e8a12037f4421276468e2e7/platform-tests%2Fsrc%2Ftest%2Fjava%2Forg%2Fjunit%2Fplatform%2Fcommons%2Fsupport%2FClassSupportTests.java",
    "is_test_file": true
  }
}